import scala.annotation.strictfp
import scala.math._

@strictfp
object allTests_rewriting {

  /* @pre: ((0.0 <= u) && (u <= 1.0)) */

    def bspline3(u: Double): Double = {
    (u * (u * (u / -(6.0))))
  } // [-0.16666666666666666, 0.0] +/- 9.714451465470121e-17

  /* @pre: ((re >= -10.0) && (re <= 10.0) && (im >= -10.0) && (im <= 10.0)) */

    def complex_sine_cosine(re: Double, im: Double): Double = {
    ((0.5 * sin(re)) * (exp(-(im)) - exp(im)))
  } // [-11013.232874703395, 11013.232874703395] +/- 3.724754450490231e-11

  /* @pre: ((-100.0 <= u) && (u <= 100.0) && (20.0 <= v) && (v <= 20000.0) && (-30.0 <= T) && (T <= 50.0)) */

    def doppler1(u: Double, v: Double, T: Double): Double = {
    val t1: Double = ((0.6 * T) + 331.4)
    (-(t1) * ((v / (t1 + u)) / (t1 + u)))
  } // [-158.7191444098274, -0.02944244059231351] +/- 1.980501095711251e-13

  /* @pre: ((-125.0 <= u) && (u <= 125.0) && (15.0 <= v) && (v <= 25000.0) && (-40.0 <= T) && (T <= 60.0)) */

    def doppler2(u: Double, v: Double, T: Double): Double = {
    val t1: Double = ((T * 0.6) + 331.4)
    ((v * (-(t1) / (t1 + u))) / (t1 + u))
  } // [-276.0765331640505, -0.019017745606492446] +/- 3.874656039583571e-13

  /* @pre: ((-30.0 <= u) && (u <= 120.0) && (320.0 <= v) && (v <= 20300.0) && (-50.0 <= T) && (T <= 30.0)) */

    def doppler3(u: Double, v: Double, T: Double): Double = {
    val t1: Double = (331.4 + (T * 0.6))
    ((v / ((t1 + u) / -(t1))) / (t1 + u))
  } // [-96.29400542724778, -0.43773074947775303] +/- 9.787777205044545e-14

  /* @pre: ((0.001 < a11) && (a11 < 10.0) && (0.001 < b1) && (b1 < 10.0) && (0.0 < x1) && (x1 < 10.0) && (0.0 < x2) && (x2 < 10.0) && (0.0 < x3) && (x3 < 10.0) && (0.0 < x4) && (x4 < 10.0)) */

    def jacobisMethodX1(a11: Double, b1: Double, x1: Double, x2: Double, x3: Double, x4: Double): Double = {
    val x_n1: Double = ((b1 / a11) - (((0.1 / a11) * x2) + (((0.2 / a11) * x3) - ((0.3 * x4) / a11))))
    x_n1
  } // [-2999.9999, 13000.0] +/- 1.1551333112279045e-08

  /* @pre: ((4.0 <= x1) && (x1 <= 6.36) && (4.0 <= x2) && (x2 <= 6.36) && (4.0 <= x3) && (x3 <= 6.36) && (4.0 <= x4) && (x4 <= 6.36) && (4.0 <= x5) && (x5 <= 6.36) && (4.0 <= x6) && (x6 <= 6.36)) */

    def kepler0(x1: Double, x2: Double, x3: Double, x4: Double, x5: Double, x6: Double): Double = {
    ((x6 * x1) + (((((x6 - x2) * x3) + ((x2 - x6) * x5)) + ((x1 * (x2 - x1)) + (x1 * (x3 - x4)))) + (x5 * x1)))
  } // [-28.0384, 140.9376] +/- 6.336264846140694e-14

  /* @pre: ((4.0 <= x1) && (x1 <= 6.36) && (4.0 <= x2) && (x2 <= 6.36) && (4.0 <= x3) && (x3 <= 6.36) && (4.0 <= x4) && (x4 <= 6.36)) */

    def kepler1(x1: Double, x2: Double, x3: Double, x4: Double): Double = {
    (((x1 * (((x3 - x4) * x4) + (x4 * (x2 - x1)))) + (((x2 * x4) + ((x2 * (x1 - x2)) + (x3 * x2))) + (((((x2 - x3) * x3) + (x4 * x3)) + (x3 * x1)) - (x3 * (x2 * x4))))) - (((x1 * x2) + x4) + (x3 * x1)))
  } // [-501.459968, 282.739712] +/- 3.2418121520549905e-13

  /* @pre: ((4.0 <= x1) && (x1 <= 6.36) && (4.0 <= x2) && (x2 <= 6.36) && (4.0 <= x3) && (x3 <= 6.36) && (4.0 <= x4) && (x4 <= 6.36) && (4.0 <= x5) && (x5 <= 6.36) && (4.0 <= x6) && (x6 <= 6.36)) */

    def kepler2(x1: Double, x2: Double, x3: Double, x4: Double, x5: Double, x6: Double): Double = {
    ((((x4 * x1) * (((x2 - x1) + (x3 - x4)) + x5)) + (((x4 * x1) * x6) + (x2 * ((x5 * ((x1 - x2) + x3)) + (x5 * ((x4 - x5) + x6)))))) + (((x3 * ((x6 * (((x2 - x3) + x1) + x4)) + ((x5 - x6) * x6))) - ((x2 * x3) * x4)) - ((x5 * (x3 * x1)) + (x6 * ((x4 * x5) + (x2 * x1))))))
  } // [-911.479936, 1860.323072] +/- 1.707691410501866e-12

  /* @pre: ((0.1 <= x) && (x <= 0.3)) */

    def predatorPrey(x: Double): Double = {
    ((4.0 * (x * x)) / (1.0 + ((x * x) / 1.2321)))
  } // [0.03727705922396188, 0.35710168263424846] +/- 1.6472768398036668e-16

  /* @pre: ((-15.0 <= x1) && (x1 <= 15.0) && (-15.0 <= x2) && (x2 <= 15.0) && (-15.0 <= x3) && (x3 <= 15.0)) */

    def rigidBody1(x1: Double, x2: Double, x3: Double): Double = {
    ((-((x2 * x1)) - (x1 + x3)) - ((2.0 * x2) * x3))
  } // [-705.0, 705.0] +/- 1.971756091734278e-13

  /* @pre: ((-15.0 <= x1) && (x1 <= 15.0) && (-15.0 <= x2) && (x2 <= 15.0) && (-15.0 <= x3) && (x3 <= 15.0)) */

    def rigidBody2(x1: Double, x2: Double, x3: Double): Double = {
    ((((3.0 * (x3 * x3)) - x2) + (x3 * ((x2 * (x1 * 2.0)) + (3.0 * x3)))) - ((x3 * x2) * (x2 * x1)))
  } // [-58740.0, 58740.0] +/- 2.899280815427119e-11

  /* @pre: ((-4.5 <= v) && (v <= -0.3) && (0.4 <= w) && (w <= 0.9) && (3.8 <= r) && (r <= 7.8)) */

    def turbine1(v: Double, w: Double, r: Double): Double = {
    ((((2.0 / r) / r) - 1.5) - ((3.0 - (v * 2.0)) * (0.125 * ((w * (w * (r * r))) / (1.0 - v)))))
  } // [-58.32912689020381, -1.5505285721480735] +/- 8.021557111621937e-14

  /* @pre: ((-4.5 <= v) && (v <= -0.3) && (0.4 <= w) && (w <= 0.9) && (3.8 <= r) && (r <= 7.8)) */

    def turbine2(v: Double, w: Double, r: Double): Double = {
    (((v * 6.0) - 2.5) - ((0.5 * v) * ((w * (w * (r * r))) / (1.0 - v))))
  } // [-29.43698909090909, 80.993] +/- 1.2349922886986813e-13

  /* @pre: ((-4.5 <= v) && (v <= -0.3) && (0.4 <= w) && (w <= 0.9) && (3.8 <= r) && (r <= 7.8)) */

    def turbine3(v: Double, w: Double, r: Double): Double = {
    ((3.0 - ((2.0 / (r * r)) + 0.5)) - (((2.0 * (0.125 * v)) * ((w * (w * (r * r))) / (1.0 - v))) + (0.125 * ((w * (w * (r * r))) / (1.0 - v)))))
  } // [-2.345498700579199, 45.06111779929472] +/- 5.685430749602335e-14

  /* @pre: ((0.1 <= x) && (x <= 0.3)) */

    def verhulst(x: Double): Double = {
    val r: Double = 4.0
    val K: Double = 1.11
    ((r * x) / (1.0 + (x / K)))
  } // [0.3148936170212766, 1.1008264462809918] +/- 3.718955188047529e-16

}
