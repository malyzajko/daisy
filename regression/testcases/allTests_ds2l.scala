import scala.annotation.strictfp
import daisy.lang._
import Real._

@strictfp
object allTests_ds2l {

  def alphaBlending_allsame(b: Matrix, c: Matrix, alpha: Real): Matrix = {
require(0.0 <= alpha && alpha <= 1.0
   && b >= 223.35 && b <= 530.05 && b.size(10,10)
   && c >= -253.26 && c <= -108.41 && c.size(10,10)
  )

          b * alpha + c * (1 - alpha)
  }

  def avg_allsame(x: Vector): Real = {
require(x >= -62.54 && x <= 15.02 && x.size(100)
  )

        val n: Real = x.length()
        val z = x.fold(0.0)((acc: Real, i: Real) => acc + i)
        z / n
    }

  def controllerTora_allsame(x: Vector, weights1: Matrix, weights2: Matrix, weights3: Matrix, weights4: Matrix, bias1: Vector, bias2: Vector, bias3: Vector, bias4: Real): Vector = {
require(10.197819 <= bias4 && bias4 <= 10.197819
   && x >= -2.0 && x <= 2.0 && x.size(10)
   && bias1 >= 0.040232 && bias1 <= 0.341392 && bias1.size(10)
   && bias2 >= 0.082624 && bias2 <= 0.318763 && bias2.size(10)
   && bias3 >= 0.096189 && bias3 <= 0.297542 && bias3.size(10)
   && weights1 >= -0.374036 && weights1 <= 0.319683 && weights1.size(10,10)
   && weights2 >= -0.426394 && weights2 <= 0.323056 && weights2.size(10,10)
   && weights3 >= -0.582338 && weights3 <= 0.566423 && weights3.size(10,10)
   && weights4 >= -0.293298 && weights4 <= 0.311236 && weights4.size(1,10)
  )

    val layer1 = (weights1.x(x) + bias1).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer2 = (weights2.x(layer1) + bias2).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer3 = (weights3.x(layer2) + bias3).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer4 = (weights4.x(layer3) + bias4)

    layer4
  }

  def convolve2d_size3_allsame(image: Matrix, kernel: Matrix): Matrix = {
require(image >= -153.55 && image <= 291.35 && image.size(3,3)
   && kernel >= -104.89 && kernel <= 57.21 && kernel.size(3, 3)
  )

        val flippedK: Matrix = (kernel.flipud()).fliplr()
        val padded: Matrix = image.pad(1,1)
        val output: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedK.*(m) // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })
        output
    }

  def fftmatrix_allsame(m: Matrix): Matrix = {
require(m >= -326.68 && m <= 677.57 && m.size(4,2)
  )
/* m: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (m.numRows() == 1)
            m
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = m.numRows()   /* signal length, has to be power of 2 */
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Matrix = fftmatrix_allsame(m.everyNth(2, 0))
            val odds: Matrix = fftmatrix_allsame(m.everyNth(2, 1))

            val resleft: Matrix = evens.enumRowsMap((k:Int, x:Vector) => {
                //val (k, x) = y
                val base: Vector = x / scalar
                val offset: Vector = (direction.*(Pi * k / n)).exp() x odds.row(k) / scalar // here vector multiplication should be specialy defined for complex numbers? is it the same as cross product of vectors?
                base + offset
            })
            val resright: Matrix = evens.enumRowsMap((k:Int, x:Vector)  => {
                //val (k, x) = y
                val base: Vector = x / scalar
                val offset: Vector = (direction.*(Pi * k / n)).exp() x odds.row(k) / scalar // here vector multiplication should be specialy defined for complex numbers?
                base - offset
            })

            resleft ++ resright
        }
    }

  def fftvector_allsame(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(4)
   && vi >= -133.21 && vi <= 723.11 && vi.size(4)
  )

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector_allsame(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector_allsame(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }

  def goubault_allsame(x:Vector, y: Real): Real = {
require(54.86 <= y && y <= 359.03
   && x >= -270.01 && x <= 385.38 && x.size(100)
  )

        x.fold(y)((acc: Real, xi: Real) => {0.75 * xi - 0.125 * acc})
    }


  def harmonic_allsame(x: Vector, y: Vector): Vector = {
require(x >= -5.32 && x <= 725.6 && x.size(100)
   && y >= -432.12 && y <= 78.94 && y.size(100)
  )

        //x1 := x1 + 0.01 * x2
        val x1: Real = y.fold(x.head)((acc: Real, xi: Real) => {acc + 0.01* xi})
        //x2 := -0.01 * x1 + 0.99 * x2
        val x2: Real = x.fold(y.head)((acc: Real, xi: Real) => {-0.01 * xi + 0.99 * acc})
        Vector(List(x1, x2))
    }

  def heat1d_allsame(ax: Vector): Real = {
require(ax >= 1.0 && ax <= 2.0 && ax.size(33)
  )

          if (ax.length() <= 1) {
            ax.head
        } else {
            val coef = Vector(List(0.25, 0.5, 0.25))
            val updCoefs: Vector = ax.slideReduce(3,1)(v =>  (coef*v).sum())
            heat1d_allsame(updCoefs)
        }
    }

  def lorentz_allsame(m:Matrix): Vector = {
require(m >= 1.0 && m <= 2.0 && m.size(21,3)
  )

        val init: Vector = m.row(0)
        m.fold(init)((acc, v) => {
            val x:Real = acc.at(0)
            val y:Real = acc.at(1)
            val z:Real = acc.at(2)
            val tmpx:Real = x + 10.0*(y - x)*0.005
            val tmpy:Real = y + (28.0*x - y - x*z)*0.005
            val tmpz:Real = z + (x*y - 2.666667*z)*0.005
            Vector(List(tmpx,tmpy,tmpz))
        })
    }

  def lyapunov_allsame(x: Vector, weights1: Matrix, weights2: Matrix, bias1: Vector, bias2: Real): Vector = {
require(0.5307131 <= bias2 && bias2 <= 0.5307131
   && x >= -6.0 && x <= 6.0 && x.size(10)
   && bias1 >= -0.8746956 && bias1 <= 1.1860801 && bias1.size(10)
   && weights1 >= -0.6363012 && weights1 <= 1.0211772 && weights1.size(10,10)
   && weights2 >= -0.80846876 && weights2 <= 1.1081733 && weights2.size(1,10)
  )

    val layer1: Vector = (weights1.x(x) + bias1).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer2: Vector = (weights2.x(layer1) + bias2).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    layer2
  }

  def nonlin3_allsame(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(100)
   && y >= 0.0 && y <= 1.0 && y.size(100)
  )

        //x := x + 0.01 * (-x + y*y)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-acc + yi*yi)})
        //y := y + 0.01 * (-2.0*y + 3.0*x*x)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (-2.0*acc + 3.0*xi*xi)})
        Vector(List(x1, y1))
    }

  def pendulum_allsame(t: Vector, w: Vector): Vector = {
require(t >= -2.0 && t <= 2.0 && t.size(100)
   && w >= -5.0 && w <= 5.0 && w.size(100)
  )

        val h: Real = 0.01
        val L: Real = 2.0
        val g: Real = 9.80665

        val iter = Vector.zip(t,w)
        val init = Vector(List(t.head, w.head))

        iter.fold(init)((acc, x) => {
            val kt = acc.at(1)
            val kw = -g/L * sin(acc.head)

            val v = Vector(List(kt,kw))
            acc + v*h
        })
    }

  def roux1_allsame(x: Vector): Real = {
require(x >= -58.25 && x <= 61.32 && x.size(100)
  )

        x.fold(0.0)((y: Real, i: Real) => {1.5 * i - 0.7 * y})
    }


  def variance_allsame(x: Vector): Real = {
require(x >= -252.68 && x <= 72.42 && x.size(100)
  )

        val n: Real = x.length()
        val y = x.fold(0.0)((acc: Real, i: Real) => acc + i)
        val avg = y / n

        val z = x.fold(0.0)((acc: Real, i: Real) => acc + pow(i - avg, 2))
        z / n
    }



    def alphaBlending(b: Matrix, c: Matrix, alpha: Real): Matrix = {
require(0.0 <= alpha && alpha <= 1.0
   && b >= 223.35 && b <= 530.05 && b.size(10,10)
   && b.specM(Set((Set((0, 0)),(279.61, 398.01)), (Set((0, 1)),(395.18, 460.42)),
    (Set((0, 2)),(237.64, 403.43)), (Set((0, 3)),(371.02, 439.78)),
    (Set((0, 4)),(269.09, 299.85)), (Set((0, 5)),(353.55, 431.8)),
    (Set((0, 6)),(257.61, 377.23)), (Set((0, 7)),(413.59, 507.17)),
    (Set((0, 8)),(444.58, 505.25)), (Set((0, 9)),(230.78, 506.11)),
    (Set((1, 0)),(338.08, 437.1)), (Set((1, 1)),(289.24, 353.42)),
    (Set((1, 2)),(488.95, 508.39)), (Set((1, 3)),(360.79, 517.17)),
    (Set((1, 4)),(316.68, 503.57)), (Set((1, 5)),(278.75, 466.61)),
    (Set((1, 6)),(343.97, 392.49)), (Set((1, 7)),(409.53, 426.11)),
    (Set((1, 8)),(272.4, 294.08)), (Set((1, 9)),(386.28, 496.98)),
    (Set((2, 0)),(248.88, 404.12)), (Set((2, 1)),(251.03, 503.9)),
    (Set((2, 2)),(411.76, 471.46)), (Set((2, 3)),(228.52, 471.3)),
    (Set((2, 4)),(337.74, 526.49)), (Set((2, 5)),(228.79, 251.5)),
    (Set((2, 6)),(306.29, 356.72)), (Set((2, 7)),(289.56, 439.6)),
    (Set((2, 8)),(385.73, 521.67)), (Set((2, 9)),(249.54, 501.51)),
    (Set((3, 0)),(341.66, 479.85)), (Set((3, 1)),(324.2, 437.36)),
    (Set((3, 2)),(299.8, 402.08)), (Set((3, 3)),(340.35, 416.51)),
    (Set((3, 4)),(401.61, 486.78)), (Set((3, 5)),(417.3, 431.59)),
    (Set((3, 6)),(234.63, 245.51)), (Set((3, 7)),(277.16, 335.73)),
    (Set((3, 8)),(256.15, 338.19)), (Set((3, 9)),(276.76, 378.84)),
    (Set((4, 0)),(299.54, 514.24)), (Set((4, 1)),(227.81, 286.39)),
    (Set((4, 2)),(387.65, 505.58)), (Set((4, 3)),(442.95, 447.75)),
    (Set((4, 4)),(360.11, 397.17)), (Set((4, 5)),(226.42, 260.96)),
    (Set((4, 6)),(375.97, 465.15)), (Set((4, 7)),(247.22, 446.29)),
    (Set((4, 8)),(314.79, 320.89)), (Set((4, 9)),(314.81, 393.59)),
    (Set((5, 0)),(304.6, 351.44)), (Set((5, 1)),(342.32, 524.0)),
    (Set((5, 2)),(338.76, 432.88)), (Set((5, 3)),(304.11, 304.29)),
    (Set((5, 4)),(270.37, 427.66)), (Set((5, 5)),(308.47, 470.5)),
    (Set((5, 6)),(340.15, 463.19)), (Set((5, 7)),(293.7, 454.56)),
    (Set((5, 8)),(240.98, 502.7)), (Set((5, 9)),(316.21, 480.49)),
    (Set((6, 0)),(287.57, 412.7)), (Set((6, 1)),(240.81, 466.42)),
    (Set((6, 2)),(316.89, 407.02)), (Set((6, 3)),(393.02, 436.48)),
    (Set((6, 4)),(260.8, 493.47)), (Set((6, 5)),(368.27, 444.17)),
    (Set((6, 6)),(408.7, 459.31)), (Set((6, 7)),(491.61, 501.24)),
    (Set((6, 8)),(238.83, 449.97)), (Set((6, 9)),(263.64, 281.35)),
    (Set((7, 0)),(228.7, 472.63)), (Set((7, 1)),(295.47, 383.26)),
    (Set((7, 2)),(269.1, 440.7)), (Set((7, 3)),(301.79, 464.78)),
    (Set((7, 4)),(372.46, 524.48)), (Set((7, 5)),(227.32, 474.09)),
    (Set((7, 6)),(342.12, 417.49)), (Set((7, 7)),(292.29, 405.46)),
    (Set((7, 8)),(262.53, 288.23)), (Set((7, 9)),(371.43, 386.82)),
    (Set((8, 0)),(321.47, 441.14)), (Set((8, 1)),(434.63, 502.48)),
    (Set((8, 2)),(235.35, 388.91)), (Set((8, 3)),(230.41, 275.85)),
    (Set((8, 4)),(335.02, 411.71)), (Set((8, 5)),(429.55, 452.44)),
    (Set((8, 6)),(235.28, 477.19)), (Set((8, 7)),(360.97, 410.93)),
    (Set((8, 8)),(241.81, 373.11)), (Set((8, 9)),(424.63, 450.67)),
    (Set((9, 0)),(272.48, 482.06)), (Set((9, 1)),(242.59, 288.24)),
    (Set((9, 2)),(329.82, 478.15)), (Set((9, 3)),(429.14, 447.27)),
    (Set((9, 4)),(259.14, 275.11)), (Set((9, 5)),(245.27, 511.81)),
    (Set((9, 6)),(278.03, 294.94)), (Set((9, 7)),(229.18, 412.93)),
    (Set((9, 8)),(397.73, 432.63)), (Set((9, 9)),(253.41, 298.89))))
   && c >= -253.26 && c <= -108.41 && c.size(10,10)
   && c.specM(Set((Set((0, 0)),(-231.91, -228.03)), (Set((0, 1)),(-215.62, -164.5)),
    (Set((0, 2)),(-236.46, -112.45)), (Set((0, 3)),(-175.13, -174.05)),
    (Set((0, 4)),(-187.32, -161.41)), (Set((0, 5)),(-224.11, -218.67)),
    (Set((0, 6)),(-209.47, -176.35)), (Set((0, 7)),(-192.84, -166.74)),
    (Set((0, 8)),(-209.12, -128.6)), (Set((0, 9)),(-201.83, -136.25)),
    (Set((1, 0)),(-203.71, -164.63)), (Set((1, 1)),(-197.08, -160.11)),
    (Set((1, 2)),(-233.29, -132.57)), (Set((1, 3)),(-242.3, -195.75)),
    (Set((1, 4)),(-253.23, -158.31)), (Set((1, 5)),(-160.15, -140.14)),
    (Set((1, 6)),(-217.05, -144.94)), (Set((1, 7)),(-155.09, -123.67)),
    (Set((1, 8)),(-228.16, -197.16)), (Set((1, 9)),(-187.72, -162.48)),
    (Set((2, 0)),(-222.12, -158.4)), (Set((2, 1)),(-202.25, -126.1)),
    (Set((2, 2)),(-190.36, -108.63)), (Set((2, 3)),(-239.71, -185.93)),
    (Set((2, 4)),(-230.2, -138.06)), (Set((2, 5)),(-229.93, -197.79)),
    (Set((2, 6)),(-216.48, -210.24)), (Set((2, 7)),(-214.09, -148.66)),
    (Set((2, 8)),(-202.36, -197.43)), (Set((2, 9)),(-204.92, -117.69)),
    (Set((3, 0)),(-178.19, -145.3)), (Set((3, 1)),(-186.91, -129.36)),
    (Set((3, 2)),(-163.03, -143.37)), (Set((3, 3)),(-165.92, -164.15)),
    (Set((3, 4)),(-225.8, -174.52)), (Set((3, 5)),(-227.05, -218.49)),
    (Set((3, 6)),(-251.84, -216.02)), (Set((3, 7)),(-232.52, -122.4)),
    (Set((3, 8)),(-252.4, -211.8)), (Set((3, 9)),(-220.15, -180.42)),
    (Set((4, 0)),(-223.45, -150.17)), (Set((4, 1)),(-167.87, -134.57)),
    (Set((4, 2)),(-190.14, -187.03)), (Set((4, 3)),(-135.74, -126.84)),
    (Set((4, 4)),(-217.54, -175.56)), (Set((4, 5)),(-177.1, -132.81)),
    (Set((4, 6)),(-183.57, -109.18)), (Set((4, 7)),(-153.11, -118.74)),
    (Set((4, 8)),(-233.52, -113.88)), (Set((4, 9)),(-136.36, -115.87)),
    (Set((5, 0)),(-165.94, -159.14)), (Set((5, 1)),(-252.58, -248.57)),
    (Set((5, 2)),(-187.78, -155.77)), (Set((5, 3)),(-168.19, -131.83)),
    (Set((5, 4)),(-237.28, -115.53)), (Set((5, 5)),(-180.85, -154.02)),
    (Set((5, 6)),(-113.92, -110.17)), (Set((5, 7)),(-217.25, -185.15)),
    (Set((5, 8)),(-235.39, -155.9)), (Set((5, 9)),(-250.28, -122.68)),
    (Set((6, 0)),(-171.89, -148.09)), (Set((6, 1)),(-181.68, -143.61)),
    (Set((6, 2)),(-166.02, -155.63)), (Set((6, 3)),(-188.25, -116.57)),
    (Set((6, 4)),(-233.97, -141.33)), (Set((6, 5)),(-229.55, -220.63)),
    (Set((6, 6)),(-172.9, -149.88)), (Set((6, 7)),(-232.0, -196.84)),
    (Set((6, 8)),(-220.23, -178.93)), (Set((6, 9)),(-170.19, -127.29)),
    (Set((7, 0)),(-204.72, -119.67)), (Set((7, 1)),(-171.74, -150.13)),
    (Set((7, 2)),(-132.93, -121.42)), (Set((7, 3)),(-175.58, -120.01)),
    (Set((7, 4)),(-203.44, -186.4)), (Set((7, 5)),(-158.27, -132.01)),
    (Set((7, 6)),(-169.24, -139.84)), (Set((7, 7)),(-202.93, -157.66)),
    (Set((7, 8)),(-238.49, -208.23)), (Set((7, 9)),(-250.9, -173.19)),
    (Set((8, 0)),(-241.4, -121.02)), (Set((8, 1)),(-177.38, -166.47)),
    (Set((8, 2)),(-195.39, -152.12)), (Set((8, 3)),(-225.43, -152.29)),
    (Set((8, 4)),(-161.71, -123.66)), (Set((8, 5)),(-235.57, -187.47)),
    (Set((8, 6)),(-195.04, -128.43)), (Set((8, 7)),(-140.65, -113.67)),
    (Set((8, 8)),(-160.82, -139.79)), (Set((8, 9)),(-198.58, -186.96)),
    (Set((9, 0)),(-117.44, -115.27)), (Set((9, 1)),(-227.15, -159.17)),
    (Set((9, 2)),(-239.5, -183.09)), (Set((9, 3)),(-208.03, -186.32)),
    (Set((9, 4)),(-151.52, -128.5)), (Set((9, 5)),(-148.55, -116.74)),
    (Set((9, 6)),(-223.43, -117.28)), (Set((9, 7)),(-217.63, -131.15)),
    (Set((9, 8)),(-251.71, -134.03)), (Set((9, 9)),(-158.74, -112.38))))
  )

          b * alpha + c * (1 - alpha)
  }

  def avg(x: Vector): Real = {
require(x >= -62.54 && x <= 15.02 && x.size(100)
   && x.specV(Set(((0, 0),(-41.52, -33.01)), ((1, 1),(-53.79, -12.55)), ((2, 2),(-16.71, -9.39)),
((3, 3),(-33.75, -9.13)), ((4, 4),(-8.36, 8.88)), ((5, 5),(-43.46, -36.13)),
((6, 6),(-51.36, -18.23)), ((7, 7),(-50.34, -10.67)), ((8, 8),(-38.53, -26.96)),
((9, 9),(-34.3, 9.45)), ((10, 10),(-9.14, 12.07)), ((11, 11),(-34.39, -13.84)),
((12, 12),(-13.88, -6.11)), ((13, 13),(-15.15, 7.99)), ((14, 14),(-45.94, 13.51)),
((15, 15),(-23.84, -4.66)), ((16, 16),(-4.8, 5.59)), ((17, 17),(-6.9, 5.35)),
((18, 18),(-29.29, -9.63)), ((19, 19),(-60.0, -24.06)), ((20, 20),(-54.37, -44.16)),
((21, 21),(-51.88, -1.48)), ((22, 22),(-37.55, -15.85)), ((23, 23),(-51.89, -0.75)),
((24, 24),(-40.74, 11.69)), ((25, 25),(-26.9, 4.11)), ((26, 26),(-26.84, 10.29)),
((27, 27),(-44.17, -37.03)), ((28, 28),(-42.85, 10.62)), ((29, 29),(-57.08, -51.66)),
((30, 30),(-53.25, -29.55)), ((31, 31),(-5.17, 1.65)), ((32, 32),(-53.82, -15.91)),
((33, 33),(-29.0, 9.25)), ((34, 34),(0.01, 9.89)), ((35, 35),(-23.58, 2.0)),
((36, 36),(-21.28, -16.76)), ((37, 37),(-35.7, 14.09)), ((38, 38),(-30.58, -1.03)),
((39, 39),(-40.66, -22.91)), ((40, 40),(-20.44, 4.94)), ((41, 41),(-55.75, -29.86)),
((42, 42),(-42.05, -28.69)), ((43, 43),(-49.16, 7.78)), ((44, 44),(-44.03, -22.39)),
((45, 45),(-26.73, 2.9)), ((46, 46),(-41.83, 6.26)), ((47, 47),(-4.17, 9.21)),
((48, 48),(3.84, 14.65)), ((49, 49),(-30.02, -13.89)), ((50, 50),(-35.34, -0.65)),
((51, 51),(-61.57, -52.8)), ((52, 52),(-46.74, -30.2)), ((53, 53),(-3.96, 14.0)),
((54, 54),(-10.64, 14.53)), ((55, 55),(-54.85, 8.88)), ((56, 56),(-20.72, 6.72)),
((57, 57),(-22.32, 14.48)), ((58, 58),(-50.71, -6.47)), ((59, 59),(-47.42, -46.41)),
((60, 60),(-62.48, 12.22)), ((61, 61),(-25.64, -17.37)), ((62, 62),(-22.12, -3.3)),
((63, 63),(-60.08, -24.22)), ((64, 64),(0.41, 1.67)), ((65, 65),(-18.55, -11.91)),
((66, 66),(-3.9, 1.09)), ((67, 67),(-25.7, -1.43)), ((68, 68),(-3.72, 1.88)),
((69, 69),(3.61, 8.22)), ((70, 70),(-46.5, -31.97)), ((71, 71),(-52.3, 9.71)),
((72, 72),(-54.82, -8.73)), ((73, 73),(-52.52, 3.69)), ((74, 74),(-60.63, -49.86)),
((75, 75),(-61.93, -1.93)), ((76, 76),(-17.98, 0.03)), ((77, 77),(-20.49, -3.94)),
((78, 78),(-33.71, 1.72)), ((79, 79),(-5.12, 10.24)), ((80, 80),(-25.16, -3.9)),
((81, 81),(-10.36, -8.95)), ((82, 82),(-19.71, 11.18)), ((83, 83),(-17.94, 3.83)),
((84, 84),(-34.26, -20.3)), ((85, 85),(-47.83, -45.61)), ((86, 86),(-2.47, 12.24)),
((87, 87),(-52.94, -37.58)), ((88, 88),(-49.51, -43.59)), ((89, 89),(-36.97, -15.11)),
((90, 90),(-53.64, -28.07)), ((91, 91),(-43.86, -22.45)), ((92, 92),(-22.54, -12.67)),
((93, 93),(-10.91, 1.45)), ((94, 94),(-60.93, 1.65)), ((95, 95),(-44.56, -4.58)),
((96, 96),(-26.18, 11.2)), ((97, 97),(-59.25, -46.57)), ((98, 98),(-30.59, -5.86)),
((99, 99),(-59.3, -18.46))))
  )

        val n: Real = x.length()
        val z = x.fold(0.0)((acc: Real, i: Real) => acc + i)
        z / n
    }

  def controllerTora(x: Vector, weights1: Matrix, weights2: Matrix, weights3: Matrix, weights4: Matrix, bias1: Vector, bias2: Vector, bias3: Vector, bias4: Real): Vector = {
require(10.197819 <= bias4 && bias4 <= 10.197819
   && x >= -2.0 && x <= 2.0 && x.size(10)
   && x.specV(Set(((0, 0),(1.38, 1.96)), ((1, 1),(0.14, 0.98)), ((2, 2),(-0.77, 1.89)),
((3, 3),(0.09, 0.61)), ((4, 4),(-0.87, 1.06)), ((5, 5),(-1.66, -0.97)),
((6, 6),(-1.47, 1.38)), ((7, 7),(-1.06, -0.27)), ((8, 8),(-0.75, 1.82)),
((9, 9),(0.77, 1.99))))
   && bias1 >= 0.040232 && bias1 <= 0.341392 && bias1.size(10)
   && bias1.specV(Set(((0, 0),(0.08, 0.2)), ((1, 1),(0.18, 0.2)), ((2, 2),(0.05, 0.12)),
((3, 3),(0.15, 0.32)), ((4, 4),(0.09, 0.18)), ((5, 5),(0.14, 0.16)),
((6, 6),(0.18, 0.29)), ((7, 7),(0.18, 0.24)), ((8, 8),(0.19, 0.21)),
((9, 9),(0.09, 0.27))))
   && bias2 >= 0.082624 && bias2 <= 0.318763 && bias2.size(10)
   && bias2.specV(Set(((0, 0),(0.09, 0.17)), ((1, 1),(0.18, 0.19)), ((2, 2),(0.12, 0.25)),
((3, 3),(0.14, 0.17)), ((4, 4),(0.09, 0.12)), ((5, 5),(0.1, 0.26)),
((6, 6),(0.21, 0.23)), ((7, 7),(0.21, 0.31)), ((8, 8),(0.29, 0.318763)),
((9, 9),(0.21, 0.318763))))
   && bias3 >= 0.096189 && bias3 <= 0.297542 && bias3.size(10)
   && bias3.specV(Set(((0, 0),(0.11, 0.23)), ((1, 1),(0.21, 0.28)), ((2, 2),(0.19, 0.22)),
((3, 3),(0.1, 0.16)), ((4, 4),(0.15, 0.2)), ((5, 5),(0.17, 0.29)),
((6, 6),(0.24, 0.26)), ((7, 7),(0.15, 0.2)), ((8, 8),(0.14, 0.25)),
((9, 9),(0.21, 0.23))))
   && weights1 >= -0.374036 && weights1 <= 0.319683 && weights1.size(10,10)
   && weights1.specM(Set((Set((0, 0)),(-0.36, -0.33)), (Set((0, 1)),(-0.07, 0.27)),
    (Set((0, 2)),(-0.06, 0.02)), (Set((0, 3)),(-0.0, 0.03)),
    (Set((0, 4)),(-0.02, 0.2)), (Set((0, 5)),(0.2, 0.3)),
    (Set((0, 6)),(-0.0, 0.09)), (Set((0, 7)),(-0.28, -0.15)),
    (Set((0, 8)),(-0.03, 0.07)), (Set((0, 9)),(-0.2, 0.1)),
    (Set((1, 0)),(-0.29, -0.27)), (Set((1, 1)),(-0.37, -0.18)),
    (Set((1, 2)),(-0.34, 0.2)), (Set((1, 3)),(-0.1, 0.14)),
    (Set((1, 4)),(-0.19, -0.11)), (Set((1, 5)),(0.14, 0.14)),
    (Set((1, 6)),(-0.24, -0.07)), (Set((1, 7)),(-0.31, 0.0)),
    (Set((1, 8)),(0.01, 0.27)), (Set((1, 9)),(-0.04, 0.319683)),
    (Set((2, 0)),(-0.04, 0.15)), (Set((2, 1)),(0.05, 0.07)),
    (Set((2, 2)),(-0.13, 0.12)), (Set((2, 3)),(0.09, 0.18)),
    (Set((2, 4)),(0.04, 0.16)), (Set((2, 5)),(-0.13, -0.1)),
    (Set((2, 6)),(-0.29, 0.18)), (Set((2, 7)),(-0.19, 0.31)),
    (Set((2, 8)),(-0.15, 0.03)), (Set((2, 9)),(-0.37, -0.12)),
    (Set((3, 0)),(-0.22, -0.04)), (Set((3, 1)),(-0.29, -0.06)),
    (Set((3, 2)),(-0.28, 0.24)), (Set((3, 3)),(-0.26, 0.06)),
    (Set((3, 4)),(-0.08, 0.22)), (Set((3, 5)),(-0.3, -0.15)),
    (Set((3, 6)),(-0.27, 0.09)), (Set((3, 7)),(-0.16, 0.13)),
    (Set((3, 8)),(-0.26, 0.07)), (Set((3, 9)),(-0.28, -0.23)),
    (Set((4, 0)),(-0.16, 0.29)), (Set((4, 1)),(-0.08, 0.26)),
    (Set((4, 2)),(-0.13, 0.05)), (Set((4, 3)),(-0.31, 0.13)),
    (Set((4, 4)),(-0.14, 0.03)), (Set((4, 5)),(-0.21, 0.06)),
    (Set((4, 6)),(-0.18, 0.13)), (Set((4, 7)),(-0.35, 0.26)),
    (Set((4, 8)),(0.19, 0.24)), (Set((4, 9)),(-0.34, -0.02)),
    (Set((5, 0)),(-0.13, 0.15)), (Set((5, 1)),(-0.11, 0.05)),
    (Set((5, 2)),(0.15, 0.23)), (Set((5, 3)),(-0.18, 0.16)),
    (Set((5, 4)),(0.16, 0.27)), (Set((5, 5)),(-0.08, 0.05)),
    (Set((5, 6)),(-0.11, 0.0)), (Set((5, 7)),(0.03, 0.22)),
    (Set((5, 8)),(0.12, 0.16)), (Set((5, 9)),(-0.06, 0.27)),
    (Set((6, 0)),(-0.1, 0.16)), (Set((6, 1)),(-0.24, -0.17)),
    (Set((6, 2)),(0.21, 0.31)), (Set((6, 3)),(-0.28, 0.15)),
    (Set((6, 4)),(-0.27, 0.12)), (Set((6, 5)),(0.04, 0.28)),
    (Set((6, 6)),(-0.04, 0.02)), (Set((6, 7)),(-0.27, 0.27)),
    (Set((6, 8)),(-0.01, 0.16)), (Set((6, 9)),(0.05, 0.24)),
    (Set((7, 0)),(0.18, 0.19)), (Set((7, 1)),(-0.35, 0.29)),
    (Set((7, 2)),(-0.34, -0.33)), (Set((7, 3)),(-0.24, 0.21)),
    (Set((7, 4)),(-0.08, 0.21)), (Set((7, 5)),(-0.24, 0.16)),
    (Set((7, 6)),(0.04, 0.22)), (Set((7, 7)),(-0.37, -0.06)),
    (Set((7, 8)),(-0.1, -0.06)), (Set((7, 9)),(-0.25, -0.18)),
    (Set((8, 0)),(-0.3, -0.08)), (Set((8, 1)),(-0.26, 0.15)),
    (Set((8, 2)),(-0.33, 0.2)), (Set((8, 3)),(-0.35, 0.22)),
    (Set((8, 4)),(-0.07, 0.31)), (Set((8, 5)),(-0.35, -0.05)),
    (Set((8, 6)),(0.29, 0.319683)), (Set((8, 7)),(0.19, 0.25)),
    (Set((8, 8)),(-0.22, -0.15)), (Set((8, 9)),(-0.26, -0.09)),
    (Set((9, 0)),(0.01, 0.25)), (Set((9, 1)),(-0.15, 0.06)),
    (Set((9, 2)),(-0.06, 0.01)), (Set((9, 3)),(-0.0, 0.07)),
    (Set((9, 4)),(0.07, 0.09)), (Set((9, 5)),(-0.33, -0.3)),
    (Set((9, 6)),(-0.24, 0.05)), (Set((9, 7)),(-0.24, 0.04)),
    (Set((9, 8)),(-0.24, 0.28)), (Set((9, 9)),(-0.33, 0.28))))
   && weights2 >= -0.426394 && weights2 <= 0.323056 && weights2.size(10,10)
   && weights2.specM(Set((Set((0, 0)),(0.17, 0.3)), (Set((0, 1)),(0.13, 0.2)),
    (Set((0, 2)),(-0.34, -0.08)), (Set((0, 3)),(-0.32, 0.32)),
    (Set((0, 4)),(-0.22, -0.2)), (Set((0, 5)),(-0.26, -0.05)),
    (Set((0, 6)),(-0.25, 0.12)), (Set((0, 7)),(-0.34, -0.29)),
    (Set((0, 8)),(-0.35, -0.03)), (Set((0, 9)),(-0.41, 0.26)),
    (Set((1, 0)),(-0.41, 0.01)), (Set((1, 1)),(-0.38, 0.11)),
    (Set((1, 2)),(0.04, 0.12)), (Set((1, 3)),(-0.34, -0.04)),
    (Set((1, 4)),(-0.18, 0.21)), (Set((1, 5)),(-0.01, 0.06)),
    (Set((1, 6)),(-0.18, -0.0)), (Set((1, 7)),(-0.16, 0.24)),
    (Set((1, 8)),(0.18, 0.26)), (Set((1, 9)),(-0.21, -0.01)),
    (Set((2, 0)),(-0.13, 0.12)), (Set((2, 1)),(-0.41, 0.07)),
    (Set((2, 2)),(-0.22, 0.29)), (Set((2, 3)),(-0.31, -0.26)),
    (Set((2, 4)),(0.18, 0.27)), (Set((2, 5)),(-0.22, -0.01)),
    (Set((2, 6)),(-0.28, 0.18)), (Set((2, 7)),(-0.07, 0.32)),
    (Set((2, 8)),(-0.22, 0.05)), (Set((2, 9)),(-0.06, 0.15)),
    (Set((3, 0)),(-0.38, -0.3)), (Set((3, 1)),(-0.02, 0.25)),
    (Set((3, 2)),(-0.05, 0.3)), (Set((3, 3)),(-0.21, 0.31)),
    (Set((3, 4)),(-0.26, -0.2)), (Set((3, 5)),(-0.3, -0.16)),
    (Set((3, 6)),(-0.38, -0.19)), (Set((3, 7)),(-0.02, 0.01)),
    (Set((3, 8)),(0.27, 0.32)), (Set((3, 9)),(0.17, 0.28)),
    (Set((4, 0)),(-0.15, 0.13)), (Set((4, 1)),(-0.23, -0.13)),
    (Set((4, 2)),(-0.34, -0.13)), (Set((4, 3)),(-0.01, 0.03)),
    (Set((4, 4)),(0.18, 0.2)), (Set((4, 5)),(0.16, 0.32)),
    (Set((4, 6)),(-0.16, -0.07)), (Set((4, 7)),(-0.38, -0.36)),
    (Set((4, 8)),(-0.25, -0.01)), (Set((4, 9)),(-0.39, 0.15)),
    (Set((5, 0)),(-0.02, 0.31)), (Set((5, 1)),(0.04, 0.19)),
    (Set((5, 2)),(-0.2, 0.26)), (Set((5, 3)),(0.01, 0.21)),
    (Set((5, 4)),(-0.24, -0.2)), (Set((5, 5)),(-0.39, -0.34)),
    (Set((5, 6)),(-0.23, 0.24)), (Set((5, 7)),(0.02, 0.06)),
    (Set((5, 8)),(-0.42, 0.21)), (Set((5, 9)),(-0.12, 0.14)),
    (Set((6, 0)),(-0.25, 0.07)), (Set((6, 1)),(0.01, 0.03)),
    (Set((6, 2)),(-0.36, 0.26)), (Set((6, 3)),(-0.08, 0.31)),
    (Set((6, 4)),(0.1, 0.12)), (Set((6, 5)),(-0.22, -0.2)),
    (Set((6, 6)),(0.06, 0.22)), (Set((6, 7)),(-0.23, 0.09)),
    (Set((6, 8)),(-0.28, -0.27)), (Set((6, 9)),(-0.42, -0.19)),
    (Set((7, 0)),(-0.29, -0.1)), (Set((7, 1)),(-0.15, 0.19)),
    (Set((7, 2)),(0.15, 0.26)), (Set((7, 3)),(-0.39, -0.23)),
    (Set((7, 4)),(0.01, 0.1)), (Set((7, 5)),(-0.0, 0.17)),
    (Set((7, 6)),(-0.39, 0.25)), (Set((7, 7)),(-0.15, 0.06)),
    (Set((7, 8)),(-0.22, -0.1)), (Set((7, 9)),(-0.11, 0.09)),
    (Set((8, 0)),(-0.15, 0.05)), (Set((8, 1)),(-0.04, 0.29)),
    (Set((8, 2)),(0.04, 0.22)), (Set((8, 3)),(-0.42, 0.18)),
    (Set((8, 4)),(0.21, 0.26)), (Set((8, 5)),(-0.37, -0.29)),
    (Set((8, 6)),(-0.33, 0.21)), (Set((8, 7)),(0.19, 0.32)),
    (Set((8, 8)),(-0.22, 0.17)), (Set((8, 9)),(-0.23, 0.13)),
    (Set((9, 0)),(-0.35, 0.14)), (Set((9, 1)),(-0.42, 0.08)),
    (Set((9, 2)),(-0.32, 0.04)), (Set((9, 3)),(-0.42, -0.01)),
    (Set((9, 4)),(-0.15, 0.0)), (Set((9, 5)),(-0.19, 0.13)),
    (Set((9, 6)),(-0.2, 0.03)), (Set((9, 7)),(-0.19, 0.26)),
    (Set((9, 8)),(-0.3, -0.09)), (Set((9, 9)),(0.01, 0.27))))
   && weights3 >= -0.582338 && weights3 <= 0.566423 && weights3.size(10,10)
   && weights3.specM(Set((Set((0, 0)),(-0.07, 0.23)), (Set((0, 1)),(-0.29, 0.54)),
    (Set((0, 2)),(0.2, 0.22)), (Set((0, 3)),(-0.02, 0.49)),
    (Set((0, 4)),(-0.08, 0.41)), (Set((0, 5)),(0.31, 0.51)),
    (Set((0, 6)),(0.1, 0.33)), (Set((0, 7)),(-0.48, 0.2)),
    (Set((0, 8)),(-0.49, 0.55)), (Set((0, 9)),(-0.07, -0.05)),
    (Set((1, 0)),(-0.42, -0.28)), (Set((1, 1)),(-0.24, 0.29)),
    (Set((1, 2)),(-0.14, 0.23)), (Set((1, 3)),(-0.55, -0.08)),
    (Set((1, 4)),(-0.28, -0.09)), (Set((1, 5)),(-0.23, -0.03)),
    (Set((1, 6)),(-0.33, -0.32)), (Set((1, 7)),(0.38, 0.55)),
    (Set((1, 8)),(-0.53, 0.44)), (Set((1, 9)),(-0.23, 0.06)),
    (Set((2, 0)),(-0.58, 0.49)), (Set((2, 1)),(-0.5, -0.27)),
    (Set((2, 2)),(0.24, 0.43)), (Set((2, 3)),(0.02, 0.16)),
    (Set((2, 4)),(-0.54, -0.22)), (Set((2, 5)),(-0.45, -0.0)),
    (Set((2, 6)),(-0.49, 0.15)), (Set((2, 7)),(-0.06, 0.03)),
    (Set((2, 8)),(-0.58, -0.05)), (Set((2, 9)),(-0.37, 0.39)),
    (Set((3, 0)),(-0.21, 0.5)), (Set((3, 1)),(-0.27, 0.14)),
    (Set((3, 2)),(-0.27, 0.18)), (Set((3, 3)),(0.04, 0.34)),
    (Set((3, 4)),(-0.36, -0.23)), (Set((3, 5)),(-0.4, 0.19)),
    (Set((3, 6)),(-0.32, 0.36)), (Set((3, 7)),(0.29, 0.47)),
    (Set((3, 8)),(-0.22, 0.07)), (Set((3, 9)),(-0.55, 0.46)),
    (Set((4, 0)),(-0.18, -0.1)), (Set((4, 1)),(-0.58, -0.07)),
    (Set((4, 2)),(-0.41, -0.17)), (Set((4, 3)),(-0.58, 0.4)),
    (Set((4, 4)),(-0.17, -0.11)), (Set((4, 5)),(-0.38, 0.19)),
    (Set((4, 6)),(-0.54, -0.39)), (Set((4, 7)),(-0.08, 0.02)),
    (Set((4, 8)),(-0.29, -0.25)), (Set((4, 9)),(0.43, 0.46)),
    (Set((5, 0)),(-0.18, 0.25)), (Set((5, 1)),(0.37, 0.37)),
    (Set((5, 2)),(0.17, 0.27)), (Set((5, 3)),(-0.58, -0.53)),
    (Set((5, 4)),(-0.17, 0.47)), (Set((5, 5)),(-0.47, -0.46)),
    (Set((5, 6)),(-0.27, 0.09)), (Set((5, 7)),(-0.47, -0.45)),
    (Set((5, 8)),(-0.4, 0.48)), (Set((5, 9)),(0.32, 0.37)),
    (Set((6, 0)),(-0.58, 0.12)), (Set((6, 1)),(-0.34, 0.45)),
    (Set((6, 2)),(-0.51, 0.55)), (Set((6, 3)),(-0.04, 0.35)),
    (Set((6, 4)),(-0.39, 0.54)), (Set((6, 5)),(-0.44, -0.02)),
    (Set((6, 6)),(-0.24, 0.36)), (Set((6, 7)),(-0.18, 0.24)),
    (Set((6, 8)),(-0.52, 0.08)), (Set((6, 9)),(-0.09, -0.06)),
    (Set((7, 0)),(-0.41, 0.16)), (Set((7, 1)),(-0.16, 0.03)),
    (Set((7, 2)),(-0.25, -0.09)), (Set((7, 3)),(-0.36, 0.51)),
    (Set((7, 4)),(-0.57, -0.23)), (Set((7, 5)),(-0.58, -0.42)),
    (Set((7, 6)),(-0.08, 0.2)), (Set((7, 7)),(-0.46, 0.42)),
    (Set((7, 8)),(-0.51, -0.08)), (Set((7, 9)),(-0.52, -0.08)),
    (Set((8, 0)),(-0.54, 0.31)), (Set((8, 1)),(-0.18, 0.03)),
    (Set((8, 2)),(-0.31, 0.31)), (Set((8, 3)),(-0.13, 0.56)),
    (Set((8, 4)),(-0.25, 0.24)), (Set((8, 5)),(-0.24, -0.03)),
    (Set((8, 6)),(-0.28, 0.11)), (Set((8, 7)),(-0.31, 0.02)),
    (Set((8, 8)),(-0.56, 0.55)), (Set((8, 9)),(0.28, 0.4)),
    (Set((9, 0)),(-0.34, 0.25)), (Set((9, 1)),(-0.38, 0.27)),
    (Set((9, 2)),(0.2, 0.34)), (Set((9, 3)),(-0.58, 0.01)),
    (Set((9, 4)),(-0.31, -0.24)), (Set((9, 5)),(-0.54, -0.07)),
    (Set((9, 6)),(-0.08, 0.18)), (Set((9, 7)),(-0.33, 0.15)),
    (Set((9, 8)),(-0.13, 0.09)), (Set((9, 9)),(-0.19, -0.1))))
   && weights4 >= -0.293298 && weights4 <= 0.311236 && weights4.size(1,10)
   && weights4.specM(Set((Set((0, 0)),(-0.22, 0.15)), (Set((0, 1)),(-0.24, 0.06)),
    (Set((0, 2)),(-0.19, 0.04)), (Set((0, 3)),(-0.17, 0.18)),
    (Set((0, 4)),(-0.27, -0.08)), (Set((0, 5)),(-0.04, 0.21)),
    (Set((0, 6)),(-0.02, 0.15)), (Set((0, 7)),(-0.08, -0.01)),
    (Set((0, 8)),(-0.26, 0.18)), (Set((0, 9)),(0.16, 0.2)) ))
  )

    val layer1 = (weights1.x(x) + bias1).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer2 = (weights2.x(layer1) + bias2).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer3 = (weights3.x(layer2) + bias3).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer4 = (weights4.x(layer3) + bias4)

    layer4
  }

  def convolve2d_size3(image: Matrix, kernel: Matrix): Matrix = {
require(image >= -153.55 && image <= 291.35 && image.size(3,3)
   && image.specM(Set((Set((0, 0)),(-92.56, -19.55)), (Set((0, 1)),(-73.62, -60.65)),
    (Set((0, 2)),(-133.4, 40.21)), (Set((1, 0)),(14.43, 59.49)),
    (Set((1, 1)),(-143.41, 150.52)), (Set((1, 2)),(24.02, 156.55)),
    (Set((2, 0)),(-11.56, 87.21)), (Set((2, 1)),(11.39, 48.93)),
    (Set((2, 2)),(-59.7, -3.91))))
   && kernel >= -104.89 && kernel <= 57.21 && kernel.size(3, 3)
   && kernel.specM(Set((Set((0, 0)),(-104.15, 0.13)), (Set((0, 1)),(-33.88, -5.43)),
    (Set((0, 2)),(10.47, 13.69)), (Set((1, 0)),(-62.97, 40.7)),
    (Set((1, 1)),(-16.21, 37.66)), (Set((1, 2)),(-16.37, -2.02)),
    (Set((2, 0)),(-76.11, 13.8)), (Set((2, 1)),(-100.78, -40.07)),
    (Set((2, 2)),(-84.29, -6.81))))
  )

        val flippedK: Matrix = (kernel.flipud()).fliplr()
        val padded: Matrix = image.pad(1,1)
        val output: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedK.*(m) // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })
        output
    }

  def fftmatrix(m: Matrix): Matrix = {
require(m >= -326.68 && m <= 677.57 && m.size(4,2)
   && m.specM(Set((Set((0, 0)),(-41.42, 7.32)), (Set((0, 1)),(-307.64, -199.11)),
    (Set((1, 0)),(-145.12, -10.68)), (Set((1, 1)),(573.71, 625.55)),
    (Set((2, 0)),(283.56, 430.62)), (Set((2, 1)),(-321.9, -76.17)),
    (Set((3, 0)),(4.99, 96.14)), (Set((3, 1)),(-199.84, -13.72))))
  )
/* m: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (m.numRows() == 1)
            m
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = m.numRows()   /* signal length, has to be power of 2 */
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Matrix = fftmatrix(m.everyNth(2, 0))
            val odds: Matrix = fftmatrix(m.everyNth(2, 1))

            val resleft: Matrix = evens.enumRowsMap((k:Int, x:Vector) => {
                //val (k, x) = y
                val base: Vector = x / scalar
                val offset: Vector = (direction.*(Pi * k / n)).exp() x odds.row(k) / scalar // here vector multiplication should be specialy defined for complex numbers? is it the same as cross product of vectors?
                base + offset
            })
            val resright: Matrix = evens.enumRowsMap((k:Int, x:Vector)  => {
                //val (k, x) = y
                val base: Vector = x / scalar
                val offset: Vector = (direction.*(Pi * k / n)).exp() x odds.row(k) / scalar // here vector multiplication should be specialy defined for complex numbers?
                base - offset
            })

            resleft ++ resright
        }
    }

  def fftvector(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(4)
   && vr.specV(Set(((0, 0),(137.89, 142.94)), ((1, 1),(77.44, 95.69)), ((2, 2),(133.26, 159.54)),
((3, 3),(89.63, 114.3))))
   && vi >= -133.21 && vi <= 723.11 && vi.size(4)
   && vi.specV(Set(((0, 0),(6.75, 553.64)), ((1, 1),(-124.91, 315.18)), ((2, 2),(158.25, 534.54)),
((3, 3),(372.26, 515.46))))
  )

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }

  def goubault(x:Vector, y: Real): Real = {
require(54.86 <= y && y <= 359.03
   && x >= -270.01 && x <= 385.38 && x.size(100)
   && x.specV(Set(((0, 0),(-91.53, 21.6)), ((1, 1),(-85.38, 237.4)), ((2, 2),(-2.96, 149.83)),
((3, 3),(-149.94, 68.8)), ((4, 4),(355.14, 368.84)), ((5, 5),(62.73, 381.26)),
((6, 6),(50.53, 102.28)), ((7, 7),(57.2, 61.98)), ((8, 8),(-73.51, 373.75)),
((9, 9),(-145.25, 100.95)), ((10, 10),(-138.24, 368.19)), ((11, 11),(89.44, 103.25)),
((12, 12),(68.2, 329.43)), ((13, 13),(8.34, 249.35)), ((14, 14),(-74.11, 145.45)),
((15, 15),(-36.22, 73.59)), ((16, 16),(-147.33, -141.76)), ((17, 17),(-48.59, 33.11)),
((18, 18),(90.98, 104.18)), ((19, 19),(161.18, 207.13)), ((20, 20),(-178.95, -20.35)),
((21, 21),(-128.04, -104.59)), ((22, 22),(299.79, 378.08)), ((23, 23),(-199.22, 125.08)),
((24, 24),(-49.4, 100.41)), ((25, 25),(284.94, 382.59)), ((26, 26),(-20.5, 309.11)),
((27, 27),(-221.35, 189.04)), ((28, 28),(-16.04, 288.83)), ((29, 29),(-92.52, 344.94)),
((30, 30),(282.35, 317.78)), ((31, 31),(-256.43, 31.93)), ((32, 32),(-244.2, 51.1)),
((33, 33),(140.69, 284.74)), ((34, 34),(-206.82, -77.12)), ((35, 35),(-24.01, 108.65)),
((36, 36),(-139.92, 114.25)), ((37, 37),(-101.61, 204.6)), ((38, 38),(-233.75, 377.91)),
((39, 39),(3.12, 356.81)), ((40, 40),(-201.21, -163.83)), ((41, 41),(211.03, 358.98)),
((42, 42),(-64.53, 198.74)), ((43, 43),(-57.11, 84.44)), ((44, 44),(239.48, 267.15)),
((45, 45),(39.29, 346.59)), ((46, 46),(142.32, 300.46)), ((47, 47),(-78.81, 135.02)),
((48, 48),(-155.86, -114.43)), ((49, 49),(57.9, 216.86)), ((50, 50),(127.23, 341.69)),
((51, 51),(260.58, 341.55)), ((52, 52),(-134.18, 79.81)), ((53, 53),(65.38, 151.11)),
((54, 54),(175.03, 301.97)), ((55, 55),(227.58, 286.52)), ((56, 56),(-4.99, 277.29)),
((57, 57),(-113.23, -44.27)), ((58, 58),(140.84, 292.38)), ((59, 59),(81.34, 333.26)),
((60, 60),(-217.76, 262.07)), ((61, 61),(84.9, 207.38)), ((62, 62),(-20.21, 198.91)),
((63, 63),(257.33, 321.08)), ((64, 64),(-94.21, 190.73)), ((65, 65),(-203.88, -203.73)),
((66, 66),(91.93, 141.37)), ((67, 67),(-221.29, -221.0)), ((68, 68),(-92.8, 95.68)),
((69, 69),(27.24, 169.24)), ((70, 70),(174.17, 272.7)), ((71, 71),(-79.12, -77.74)),
((72, 72),(-184.7, 103.78)), ((73, 73),(145.4, 361.68)), ((74, 74),(-183.48, -129.86)),
((75, 75),(-80.06, 225.13)), ((76, 76),(161.34, 270.35)), ((77, 77),(244.43, 305.79)),
((78, 78),(-33.51, 223.44)), ((79, 79),(55.45, 333.63)), ((80, 80),(-86.53, 145.61)),
((81, 81),(-76.49, -30.33)), ((82, 82),(-263.17, -45.35)), ((83, 83),(-83.11, 258.01)),
((84, 84),(-39.67, 351.59)), ((85, 85),(-18.06, 20.5)), ((86, 86),(-253.83, -128.58)),
((87, 87),(-100.69, 244.26)), ((88, 88),(88.77, 346.73)), ((89, 89),(198.86, 306.21)),
((90, 90),(115.19, 361.53)), ((91, 91),(82.94, 276.72)), ((92, 92),(83.94, 296.3)),
((93, 93),(-16.49, 116.31)), ((94, 94),(141.74, 373.06)), ((95, 95),(-66.16, 183.53)),
((96, 96),(-259.18, -249.49)), ((97, 97),(-231.45, 281.5)), ((98, 98),(-248.72, -110.18)),
((99, 99),(-190.52, 326.24))))
  )

        x.fold(y)((acc: Real, xi: Real) => {0.75 * xi - 0.125 * acc})
    }

  def harmonic(x: Vector, y: Vector): Vector = {
require(x >= -5.32 && x <= 725.6 && x.size(100)
   && x.specV(Set(((0, 0),(563.21, 594.94)), ((1, 1),(206.92, 373.92)), ((2, 2),(424.46, 440.71)),
((3, 3),(522.18, 652.95)), ((4, 4),(474.81, 720.91)), ((5, 5),(684.04, 703.16)),
((6, 6),(434.25, 611.13)), ((7, 7),(40.8, 198.07)), ((8, 8),(194.85, 267.68)),
((9, 9),(553.26, 712.36)), ((10, 10),(148.14, 238.75)), ((11, 11),(99.63, 249.26)),
((12, 12),(159.16, 425.9)), ((13, 13),(207.26, 548.13)), ((14, 14),(111.66, 451.5)),
((15, 15),(256.48, 506.7)), ((16, 16),(428.66, 431.91)), ((17, 17),(429.08, 665.74)),
((18, 18),(75.64, 129.17)), ((19, 19),(178.18, 269.67)), ((20, 20),(285.77, 594.19)),
((21, 21),(238.56, 631.87)), ((22, 22),(604.52, 614.99)), ((23, 23),(513.64, 592.28)),
((24, 24),(497.08, 564.49)), ((25, 25),(336.39, 431.89)), ((26, 26),(329.42, 399.88)),
((27, 27),(82.25, 314.18)), ((28, 28),(50.67, 67.19)), ((29, 29),(105.87, 635.49)),
((30, 30),(333.89, 649.17)), ((31, 31),(167.48, 558.0)), ((32, 32),(284.9, 628.56)),
((33, 33),(236.43, 526.35)), ((34, 34),(264.3, 711.72)), ((35, 35),(139.87, 713.65)),
((36, 36),(631.56, 670.54)), ((37, 37),(29.44, 136.79)), ((38, 38),(310.23, 392.26)),
((39, 39),(518.83, 676.06)), ((40, 40),(611.1, 687.54)), ((41, 41),(676.61, 700.52)),
((42, 42),(7.53, 139.14)), ((43, 43),(159.58, 282.17)), ((44, 44),(230.4, 401.95)),
((45, 45),(60.2, 348.51)), ((46, 46),(177.58, 522.61)), ((47, 47),(203.58, 697.65)),
((48, 48),(96.44, 457.25)), ((49, 49),(71.45, 91.82)), ((50, 50),(382.85, 533.5)),
((51, 51),(222.91, 624.36)), ((52, 52),(346.57, 712.83)), ((53, 53),(67.04, 494.12)),
((54, 54),(121.12, 517.87)), ((55, 55),(454.9, 539.97)), ((56, 56),(60.57, 147.7)),
((57, 57),(-2.24, 376.28)), ((58, 58),(26.17, 39.11)), ((59, 59),(147.39, 199.16)),
((60, 60),(425.6, 507.49)), ((61, 61),(168.15, 191.27)), ((62, 62),(462.26, 702.77)),
((63, 63),(155.34, 260.49)), ((64, 64),(317.72, 422.93)), ((65, 65),(383.04, 522.79)),
((66, 66),(59.5, 95.29)), ((67, 67),(112.39, 539.29)), ((68, 68),(212.95, 591.78)),
((69, 69),(349.96, 705.46)), ((70, 70),(164.8, 616.77)), ((71, 71),(117.89, 405.46)),
((72, 72),(463.35, 670.9)), ((73, 73),(266.75, 519.53)), ((74, 74),(258.59, 607.95)),
((75, 75),(228.96, 632.48)), ((76, 76),(660.09, 687.24)), ((77, 77),(470.38, 584.57)),
((78, 78),(393.66, 703.13)), ((79, 79),(223.85, 430.24)), ((80, 80),(478.87, 697.92)),
((81, 81),(115.27, 513.19)), ((82, 82),(282.4, 360.58)), ((83, 83),(389.88, 514.36)),
((84, 84),(427.6, 533.64)), ((85, 85),(34.99, 515.84)), ((86, 86),(355.85, 585.08)),
((87, 87),(25.37, 151.31)), ((88, 88),(241.91, 309.39)), ((89, 89),(106.81, 655.62)),
((90, 90),(479.15, 609.99)), ((91, 91),(335.34, 418.24)), ((92, 92),(684.01, 717.89)),
((93, 93),(282.74, 319.56)), ((94, 94),(60.34, 561.62)), ((95, 95),(43.38, 411.87)),
((96, 96),(173.3, 567.96)), ((97, 97),(453.77, 608.33)), ((98, 98),(126.76, 330.16)),
((99, 99),(103.64, 640.91))))
   && y >= -432.12 && y <= 78.94 && y.size(100)
   && y.specV(Set(((0, 0),(-245.25, -39.43)), ((1, 1),(-290.92, -211.97)), ((2, 2),(-310.28, -42.78)),
((3, 3),(-217.88, -147.59)), ((4, 4),(-412.13, -15.67)), ((5, 5),(-263.99, -130.19)),
((6, 6),(-355.18, -74.51)), ((7, 7),(-163.11, -60.03)), ((8, 8),(-279.89, -110.33)),
((9, 9),(-231.27, -123.08)), ((10, 10),(-293.77, -272.49)), ((11, 11),(-372.67, -139.39)),
((12, 12),(-422.42, -199.83)), ((13, 13),(-357.39, -224.89)), ((14, 14),(-163.93, -33.82)),
((15, 15),(-275.97, -84.52)), ((16, 16),(-272.15, -89.74)), ((17, 17),(-142.77, -73.48)),
((18, 18),(-188.61, 43.71)), ((19, 19),(-272.11, 51.86)), ((20, 20),(-405.32, -292.62)),
((21, 21),(-410.09, -151.43)), ((22, 22),(-174.9, -35.09)), ((23, 23),(-355.86, -31.91)),
((24, 24),(-249.94, -76.08)), ((25, 25),(-340.9, 21.34)), ((26, 26),(-287.53, -41.66)),
((27, 27),(-90.71, 50.1)), ((28, 28),(-343.39, -233.75)), ((29, 29),(-412.58, -17.7)),
((30, 30),(-423.64, -168.33)), ((31, 31),(-21.75, -17.51)), ((32, 32),(-304.31, -209.25)),
((33, 33),(-412.41, -229.88)), ((34, 34),(-361.08, -167.05)), ((35, 35),(-172.95, -124.42)),
((36, 36),(-269.43, -254.77)), ((37, 37),(-94.42, 46.75)), ((38, 38),(-282.22, -251.36)),
((39, 39),(-427.57, -197.55)), ((40, 40),(-129.99, -110.94)), ((41, 41),(-270.39, 34.08)),
((42, 42),(-347.67, -164.03)), ((43, 43),(-395.54, -212.23)), ((44, 44),(-207.37, -197.74)),
((45, 45),(-352.34, -226.14)), ((46, 46),(-218.89, -30.46)), ((47, 47),(-249.44, -81.19)),
((48, 48),(-304.2, -284.18)), ((49, 49),(-364.53, -158.69)), ((50, 50),(-64.39, 63.21)),
((51, 51),(-64.5, -16.63)), ((52, 52),(-258.6, 18.12)), ((53, 53),(-105.86, 44.09)),
((54, 54),(26.07, 68.13)), ((55, 55),(-398.28, -145.99)), ((56, 56),(-121.48, -75.64)),
((57, 57),(-259.82, -220.11)), ((58, 58),(-219.67, -91.49)), ((59, 59),(-401.7, -258.95)),
((60, 60),(-302.64, -209.5)), ((61, 61),(-380.3, -226.79)), ((62, 62),(-196.56, -133.17)),
((63, 63),(-394.2, 77.92)), ((64, 64),(-264.06, 32.96)), ((65, 65),(-407.58, -315.57)),
((66, 66),(-162.85, -108.09)), ((67, 67),(-81.95, 50.42)), ((68, 68),(-425.37, -339.14)),
((69, 69),(-149.92, 77.71)), ((70, 70),(-264.42, -60.99)), ((71, 71),(-235.84, -215.67)),
((72, 72),(-324.2, -22.46)), ((73, 73),(-421.28, -154.77)), ((74, 74),(-191.91, -67.0)),
((75, 75),(-272.85, 28.86)), ((76, 76),(-256.91, -163.43)), ((77, 77),(-247.27, 27.66)),
((78, 78),(-388.29, -370.76)), ((79, 79),(-95.41, -76.39)), ((80, 80),(-358.9, 12.04)),
((81, 81),(-374.0, -231.26)), ((82, 82),(-308.47, -273.13)), ((83, 83),(-248.48, 75.42)),
((84, 84),(-353.69, 43.53)), ((85, 85),(-230.16, 20.71)), ((86, 86),(-196.35, 70.2)),
((87, 87),(-354.97, -186.51)), ((88, 88),(-378.8, -207.41)), ((89, 89),(-341.12, 76.34)),
((90, 90),(-411.92, -133.33)), ((91, 91),(-307.31, -17.79)), ((92, 92),(-393.58, -239.96)),
((93, 93),(-266.78, -174.71)), ((94, 94),(-390.55, -65.72)), ((95, 95),(-404.96, -140.31)),
((96, 96),(-320.55, -289.94)), ((97, 97),(-426.68, 48.11)), ((98, 98),(-308.31, -10.99)),
((99, 99),(-328.97, 59.38))))
  )

        //x1 := x1 + 0.01 * x2
        val x1: Real = y.fold(x.head)((acc: Real, xi: Real) => {acc + 0.01* xi})
        //x2 := -0.01 * x1 + 0.99 * x2
        val x2: Real = x.fold(y.head)((acc: Real, xi: Real) => {-0.01 * xi + 0.99 * acc})
        Vector(List(x1, x2))
    }

  def heat1d(ax: Vector): Real = {
require(ax >= 1.0 && ax <= 2.0 && ax.size(35)
   && ax.specV(Set(((0, 0),(1.5, 1.83)), ((1, 1),(1.55, 1.76)), ((2, 2),(1.53, 1.8)),
((3, 3),(1.16, 1.19)), ((4, 4),(1.14, 1.15)), ((5, 5),(1.57, 1.74)),
((6, 6),(1.43, 1.74)), ((7, 7),(1.36, 1.72)), ((8, 8),(1.37, 1.9)),
((9, 9),(1.43, 1.5)), ((10, 10),(1.43, 1.87)), ((11, 11),(1.39, 1.95)),
((12, 12),(1.43, 1.82)), ((13, 13),(1.27, 1.87)), ((14, 14),(1.04, 1.43)),
((15, 15),(1.06, 1.32)), ((16, 16),(1.09, 1.38)), ((17, 17),(1.06, 1.81)),
((18, 18),(1.11, 1.73)), ((19, 19),(1.51, 1.63)), ((20, 20),(1.26, 1.42)),
((21, 21),(1.73, 1.76)), ((22, 22),(1.34, 1.89)), ((23, 23),(1.47, 1.55)),
((24, 24),(1.15, 1.65)), ((25, 25),(1.17, 1.59)), ((26, 26),(1.04, 1.77)),
((27, 27),(1.02, 1.75)), ((28, 28),(1.14, 1.8)), ((29, 29),(1.46, 1.52)),
((30, 30),(1.63, 1.79)), ((31, 31),(1.15, 1.42)), ((32, 32),(1.0, 1.12))))
  )

        if (ax.length() <= 1) {
            ax.head
        } else {
            val coef = Vector(List(0.25, 0.5, 0.25))
            val updCoefs: Vector = ax.slideReduce(3,1)(v => {
              //val coef = Vector(List(0.25, 0.5, 0.25)) // this takes less stack space
              (coef * v).sum()
            })
            heat1d(updCoefs)
        }
    }

  def lorentz(m:Matrix): Vector = {
require(m >= 1.0 && m <= 2.0 && m.size(21,3)
   && m.specM(Set((Set((0, 0)),(1.07, 1.85)), (Set((0, 1)),(1.01, 1.9)),
    (Set((0, 2)),(1.23, 1.88)), (Set((1, 0)),(1.23, 1.86)),
    (Set((1, 1)),(1.47, 1.82)), (Set((1, 2)),(1.44, 1.82)),
    (Set((2, 0)),(1.14, 1.33)), (Set((2, 1)),(1.35, 1.51)),
    (Set((2, 2)),(1.06, 1.15)), (Set((3, 0)),(1.22, 1.73)),
    (Set((3, 1)),(1.71, 1.74)), (Set((3, 2)),(1.32, 1.82)),
    (Set((4, 0)),(1.64, 1.87)), (Set((4, 1)),(1.2, 1.73)),
    (Set((4, 2)),(1.15, 1.18)), (Set((5, 0)),(1.48, 1.61)),
    (Set((5, 1)),(1.39, 1.49)), (Set((5, 2)),(1.07, 1.72)),
    (Set((6, 0)),(1.6, 1.84)), (Set((6, 1)),(1.27, 1.48)),
    (Set((6, 2)),(1.45, 1.58)), (Set((7, 0)),(1.72, 1.89)),
    (Set((7, 1)),(1.7, 1.71)), (Set((7, 2)),(1.55, 1.63)),
    (Set((8, 0)),(1.34, 1.45)), (Set((8, 1)),(1.64, 1.98)),
    (Set((8, 2)),(1.35, 1.37)), (Set((9, 0)),(1.52, 1.83)),
    (Set((9, 1)),(1.02, 1.31)), (Set((9, 2)),(1.47, 1.84)),
    (Set((10, 0)),(1.04, 1.14)), (Set((10, 1)),(1.29, 1.62)),
    (Set((10, 2)),(1.57, 1.99)), (Set((11, 0)),(1.16, 1.54)),
    (Set((11, 1)),(1.35, 1.85)), (Set((11, 2)),(1.04, 1.78)),
    (Set((12, 0)),(1.24, 1.61)), (Set((12, 1)),(1.17, 1.44)),
    (Set((12, 2)),(1.3, 1.7)), (Set((13, 0)),(1.1, 1.68)),
    (Set((13, 1)),(1.28, 1.79)), (Set((13, 2)),(1.38, 1.6)),
    (Set((14, 0)),(1.09, 1.74)), (Set((14, 1)),(1.03, 1.42)),
    (Set((14, 2)),(1.06, 1.58)), (Set((15, 0)),(1.06, 1.91)),
    (Set((15, 1)),(1.01, 1.21)), (Set((15, 2)),(1.21, 1.67)),
    (Set((16, 0)),(1.26, 1.88)), (Set((16, 1)),(1.13, 1.99)),
    (Set((16, 2)),(1.04, 1.18)), (Set((17, 0)),(1.55, 1.96)),
    (Set((17, 1)),(1.37, 1.44)), (Set((17, 2)),(1.08, 1.74)),
    (Set((18, 0)),(1.35, 1.52)), (Set((18, 1)),(1.49, 1.92)),
    (Set((18, 2)),(1.55, 1.73)), (Set((19, 0)),(1.36, 1.37)),
    (Set((19, 1)),(1.04, 1.53)), (Set((19, 2)),(1.45, 1.79)),
    (Set((20, 0)),(1.01, 1.8)), (Set((20, 1)),(1.15, 1.63)),
    (Set((20, 2)),(1.09, 1.44))))
  )

        val init: Vector = m.row(0)
        m.fold(init)((acc, v) => {
            val x:Real = acc.at(0)
            val y:Real = acc.at(1)
            val z:Real = acc.at(2)
            val tmpx:Real = x + 10.0*(y - x)*0.005
            val tmpy:Real = y + (28.0*x - y - x*z)*0.005
            val tmpz:Real = z + (x*y - 2.666667*z)*0.005
            Vector(List(tmpx,tmpy,tmpz))
        })
    }

  def lyapunov(x: Vector, weights1: Matrix, weights2: Matrix, bias1: Vector, bias2: Real): Vector = {
require(0.5307131 <= bias2 && bias2 <= 0.5307131
   && x >= -6.0 && x <= 6.0 && x.size(10)
   && x.specV(Set(((0, 0),(-3.02, 4.06)), ((1, 1),(0.89, 2.35)), ((2, 2),(-0.94, -0.23)),
((3, 3),(-1.61, 2.75)), ((4, 4),(-3.99, 0.05)), ((5, 5),(-5.02, 2.76)),
((6, 6),(-4.38, 1.69)), ((7, 7),(-5.02, 2.43)), ((8, 8),(-1.53, 5.56)),
((9, 9),(-5.11, 1.67))))
   && bias1 >= -0.8746956 && bias1 <= 1.1860801 && bias1.size(10)
   && bias1.specV(Set(((0, 0),(-0.46, 0.31)), ((1, 1),(-0.22, 0.89)), ((2, 2),(-0.62, 0.24)),
((3, 3),(-0.32, 0.12)), ((4, 4),(-0.32, 0.95)), ((5, 5),(0.28, 0.43)),
((6, 6),(0.95, 1.06)), ((7, 7),(-0.82, -0.19)), ((8, 8),(0.15, 1.01)),
((9, 9),(-0.81, -0.24))))
   && weights1 >= -0.6363012 && weights1 <= 1.0211772 && weights1.size(10,10)
   && weights1.specM(Set((Set((0, 0)),(0.03, 0.07)), (Set((0, 1)),(0.27, 0.41)),
    (Set((0, 2)),(-0.56, -0.55)), (Set((0, 3)),(-0.54, 0.16)),
    (Set((0, 4)),(-0.59, 0.86)), (Set((0, 5)),(-0.08, 0.81)),
    (Set((0, 6)),(-0.49, 0.8)), (Set((0, 7)),(0.22, 0.26)),
    (Set((0, 8)),(-0.01, 0.65)), (Set((0, 9)),(0.8, 1.01)),
    (Set((1, 0)),(0.13, 0.49)), (Set((1, 1)),(0.86, 0.92)),
    (Set((1, 2)),(-0.49, -0.03)), (Set((1, 3)),(-0.03, 0.09)),
    (Set((1, 4)),(-0.08, 0.82)), (Set((1, 5)),(-0.29, -0.26)),
    (Set((1, 6)),(-0.2, 0.54)), (Set((1, 7)),(-0.46, 0.17)),
    (Set((1, 8)),(-0.36, 0.61)), (Set((1, 9)),(-0.56, -0.52)),
    (Set((2, 0)),(-0.27, 0.02)), (Set((2, 1)),(-0.17, 0.92)),
    (Set((2, 2)),(-0.62, -0.1)), (Set((2, 3)),(-0.24, -0.2)),
    (Set((2, 4)),(-0.26, 0.04)), (Set((2, 5)),(-0.27, 0.38)),
    (Set((2, 6)),(-0.42, 0.02)), (Set((2, 7)),(-0.21, 0.01)),
    (Set((2, 8)),(-0.5, 0.83)), (Set((2, 9)),(-0.5, -0.1)),
    (Set((3, 0)),(0.33, 0.88)), (Set((3, 1)),(0.14, 0.69)),
    (Set((3, 2)),(-0.62, 0.74)), (Set((3, 3)),(0.35, 0.92)),
    (Set((3, 4)),(-0.46, 0.75)), (Set((3, 5)),(-0.31, 0.34)),
    (Set((3, 6)),(0.52, 0.57)), (Set((3, 7)),(-0.26, 0.34)),
    (Set((3, 8)),(-0.48, 0.48)), (Set((3, 9)),(0.14, 0.6)),
    (Set((4, 0)),(0.41, 0.95)), (Set((4, 1)),(0.03, 0.4)),
    (Set((4, 2)),(0.49, 0.51)), (Set((4, 3)),(-0.21, 0.13)),
    (Set((4, 4)),(0.42, 0.68)), (Set((4, 5)),(0.72, 0.84)),
    (Set((4, 6)),(-0.03, 0.92)), (Set((4, 7)),(-0.12, 0.44)),
    (Set((4, 8)),(0.19, 0.89)), (Set((4, 9)),(-0.05, 0.54)),
    (Set((5, 0)),(0.05, 0.92)), (Set((5, 1)),(0.1, 0.91)),
    (Set((5, 2)),(-0.25, 0.67)), (Set((5, 3)),(0.08, 0.93)),
    (Set((5, 4)),(-0.07, 0.33)), (Set((5, 5)),(-0.17, 0.24)),
    (Set((5, 6)),(-0.22, 0.62)), (Set((5, 7)),(-0.08, 0.91)),
    (Set((5, 8)),(-0.1, 0.0)), (Set((5, 9)),(-0.5, -0.26)),
    (Set((6, 0)),(-0.46, 0.8)), (Set((6, 1)),(-0.59, 0.56)),
    (Set((6, 2)),(-0.45, 0.8)), (Set((6, 3)),(0.32, 0.46)),
    (Set((6, 4)),(-0.52, 0.65)), (Set((6, 5)),(0.64, 0.77)),
    (Set((6, 6)),(0.16, 0.66)), (Set((6, 7)),(0.79, 0.92)),
    (Set((6, 8)),(0.22, 0.4)), (Set((6, 9)),(-0.41, 0.23)),
    (Set((7, 0)),(-0.18, 0.84)), (Set((7, 1)),(-0.33, 0.97)),
    (Set((7, 2)),(0.15, 0.88)), (Set((7, 3)),(-0.0, 0.93)),
    (Set((7, 4)),(0.07, 0.33)), (Set((7, 5)),(0.55, 0.87)),
    (Set((7, 6)),(0.12, 0.78)), (Set((7, 7)),(-0.38, 0.72)),
    (Set((7, 8)),(0.49, 0.68)), (Set((7, 9)),(-0.38, 0.43)),
    (Set((8, 0)),(0.2, 0.74)), (Set((8, 1)),(-0.34, -0.12)),
    (Set((8, 2)),(0.31, 0.8)), (Set((8, 3)),(-0.58, 0.9)),
    (Set((8, 4)),(-0.62, 0.68)), (Set((8, 5)),(0.16, 0.8)),
    (Set((8, 6)),(0.08, 0.56)), (Set((8, 7)),(-0.32, 0.86)),
    (Set((8, 8)),(0.14, 0.64)), (Set((8, 9)),(-0.46, 0.45)),
    (Set((9, 0)),(-0.32, 0.82)), (Set((9, 1)),(-0.34, 0.95)),
    (Set((9, 2)),(0.05, 0.4)), (Set((9, 3)),(-0.26, 0.86)),
    (Set((9, 4)),(0.59, 0.71)), (Set((9, 5)),(0.89, 0.95)),
    (Set((9, 6)),(-0.6, 0.06)), (Set((9, 7)),(-0.19, -0.08)),
    (Set((9, 8)),(-0.51, 1.01)), (Set((9, 9)),(-0.62, 0.51))))
   && weights2 >= -0.80846876 && weights2 <= 1.1081733 && weights2.size(1,10)
   && weights2.specM(Set((Set((0, 0)),(-0.55, -0.3)), (Set((0, 1)),(-0.78, -0.45)),
    (Set((0, 2)),(-0.43, -0.3)), (Set((0, 3)),(0.32, 0.78)),
    (Set((0, 4)),(-0.14, 0.57)), (Set((0, 5)),(-0.2, -0.13)),
    (Set((0, 6)),(-0.12, -0.06)), (Set((0, 7)),(-0.38, 0.63)),
    (Set((0, 8)),(0.09, 0.18)), (Set((0, 9)),(-0.25, 0.75))
  ))
  )

    val layer1: Vector = (weights1.x(x) + bias1).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer2: Vector = (weights2.x(layer1) + bias2).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    layer2
  }

  def nonlin1(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(100)
   && x.specV(Set(((0, 0),(0.52, 0.74)), ((1, 1),(0.59, 0.6)), ((2, 2),(0.04, 0.5)),
((3, 3),(0.23, 0.74)), ((4, 4),(0.17, 0.36)), ((5, 5),(0.06, 0.95)),
((6, 6),(0.35, 0.87)), ((7, 7),(0.22, 0.24)), ((8, 8),(0.29, 0.35)),
((9, 9),(0.5, 0.72)), ((10, 10),(0.35, 0.66)), ((11, 11),(0.58, 0.78)),
((12, 12),(0.22, 0.57)), ((13, 13),(0.15, 0.99)), ((14, 14),(0.43, 0.86)),
((15, 15),(0.13, 0.35)), ((16, 16),(0.16, 0.56)), ((17, 17),(0.33, 0.77)),
((18, 18),(0.35, 0.77)), ((19, 19),(0.17, 0.66)), ((20, 20),(0.23, 0.72)),
((21, 21),(0.09, 0.34)), ((22, 22),(0.46, 0.47)), ((23, 23),(0.73, 0.84)),
((24, 24),(0.58, 0.93)), ((25, 25),(0.26, 0.53)), ((26, 26),(0.71, 0.91)),
((27, 27),(0.56, 0.75)), ((28, 28),(0.46, 0.73)), ((29, 29),(0.48, 0.82)),
((30, 30),(0.07, 0.93)), ((31, 31),(0.49, 0.73)), ((32, 32),(0.46, 0.8)),
((33, 33),(0.29, 0.48)), ((34, 34),(0.78, 0.82)), ((35, 35),(0.65, 0.75)),
((36, 36),(0.27, 0.65)), ((37, 37),(0.48, 0.92)), ((38, 38),(0.48, 0.9)),
((39, 39),(0.39, 0.81)), ((40, 40),(0.38, 0.85)), ((41, 41),(0.72, 0.76)),
((42, 42),(0.11, 0.46)), ((43, 43),(0.09, 0.16)), ((44, 44),(0.7, 0.86)),
((45, 45),(0.42, 0.8)), ((46, 46),(0.01, 0.68)), ((47, 47),(0.08, 0.24)),
((48, 48),(0.08, 0.97)), ((49, 49),(0.22, 0.23)), ((50, 50),(0.61, 0.88)),
((51, 51),(0.22, 0.89)), ((52, 52),(0.2, 0.62)), ((53, 53),(0.52, 0.85)),
((54, 54),(0.57, 0.81)), ((55, 55),(0.17, 0.31)), ((56, 56),(0.01, 0.71)),
((57, 57),(0.02, 0.06)), ((58, 58),(0.59, 0.84)), ((59, 59),(0.43, 0.96)),
((60, 60),(0.11, 0.75)), ((61, 61),(0.59, 0.99)), ((62, 62),(0.93, 0.93)),
((63, 63),(0.31, 0.64)), ((64, 64),(0.06, 0.82)), ((65, 65),(0.21, 0.69)),
((66, 66),(0.01, 0.34)), ((67, 67),(0.04, 0.87)), ((68, 68),(0.24, 0.71)),
((69, 69),(0.18, 0.92)), ((70, 70),(0.45, 0.51)), ((71, 71),(0.14, 0.93)),
((72, 72),(0.34, 0.45)), ((73, 73),(0.24, 0.69)), ((74, 74),(0.01, 0.74)),
((75, 75),(0.08, 0.11)), ((76, 76),(0.19, 0.35)), ((77, 77),(0.34, 0.68)),
((78, 78),(0.02, 0.65)), ((79, 79),(0.84, 0.88)), ((80, 80),(0.16, 0.57)),
((81, 81),(0.61, 1.0)), ((82, 82),(0.26, 0.59)), ((83, 83),(0.22, 0.76)),
((84, 84),(0.29, 0.88)), ((85, 85),(0.67, 0.75)), ((86, 86),(0.37, 0.37)),
((87, 87),(0.38, 0.6)), ((88, 88),(0.28, 0.89)), ((89, 89),(0.83, 0.94)),
((90, 90),(0.59, 0.72)), ((91, 91),(0.77, 0.82)), ((92, 92),(0.25, 0.75)),
((93, 93),(0.63, 0.74)), ((94, 94),(0.15, 0.91)), ((95, 95),(0.74, 0.75)),
((96, 96),(0.03, 0.97)), ((97, 97),(0.04, 0.91)), ((98, 98),(0.43, 0.97)),
((99, 99),(0.3, 0.91))))
   && y >= 0.0 && y <= 1.0 && y.size(100)
   && y.specV(Set(((0, 0),(0.52, 0.99)), ((1, 1),(0.45, 0.73)), ((2, 2),(0.42, 0.87)),
((3, 3),(0.54, 0.83)), ((4, 4),(0.11, 0.45)), ((5, 5),(0.74, 0.95)),
((6, 6),(0.09, 0.36)), ((7, 7),(0.05, 0.81)), ((8, 8),(0.17, 0.35)),
((9, 9),(0.37, 0.73)), ((10, 10),(0.71, 0.78)), ((11, 11),(0.27, 0.78)),
((12, 12),(0.59, 0.87)), ((13, 13),(0.59, 0.96)), ((14, 14),(0.55, 0.93)),
((15, 15),(0.03, 0.91)), ((16, 16),(0.19, 0.93)), ((17, 17),(0.06, 0.89)),
((18, 18),(0.49, 0.92)), ((19, 19),(0.2, 0.97)), ((20, 20),(0.15, 0.83)),
((21, 21),(0.09, 0.22)), ((22, 22),(0.61, 0.65)), ((23, 23),(0.76, 0.79)),
((24, 24),(0.62, 0.99)), ((25, 25),(0.14, 0.16)), ((26, 26),(0.08, 0.68)),
((27, 27),(0.64, 0.85)), ((28, 28),(0.3, 0.94)), ((29, 29),(0.45, 0.58)),
((30, 30),(0.63, 0.95)), ((31, 31),(0.52, 0.58)), ((32, 32),(0.6, 0.86)),
((33, 33),(0.75, 0.9)), ((34, 34),(0.45, 0.67)), ((35, 35),(0.24, 0.88)),
((36, 36),(0.19, 0.75)), ((37, 37),(0.43, 0.75)), ((38, 38),(0.21, 0.64)),
((39, 39),(0.55, 0.67)), ((40, 40),(0.2, 0.24)), ((41, 41),(0.21, 0.96)),
((42, 42),(0.49, 0.97)), ((43, 43),(0.43, 0.59)), ((44, 44),(0.57, 0.58)),
((45, 45),(0.03, 0.59)), ((46, 46),(0.41, 0.97)), ((47, 47),(0.61, 0.92)),
((48, 48),(0.04, 0.47)), ((49, 49),(0.59, 0.87)), ((50, 50),(0.53, 0.58)),
((51, 51),(0.21, 0.27)), ((52, 52),(0.16, 0.26)), ((53, 53),(0.09, 0.12)),
((54, 54),(0.17, 0.56)), ((55, 55),(0.07, 0.71)), ((56, 56),(0.23, 0.72)),
((57, 57),(0.57, 0.89)), ((58, 58),(0.43, 0.84)), ((59, 59),(0.37, 0.62)),
((60, 60),(0.08, 0.46)), ((61, 61),(0.24, 0.76)), ((62, 62),(0.09, 0.32)),
((63, 63),(0.41, 0.57)), ((64, 64),(0.17, 0.91)), ((65, 65),(0.26, 0.49)),
((66, 66),(0.75, 0.8)), ((67, 67),(0.46, 0.75)), ((68, 68),(0.08, 0.85)),
((69, 69),(0.21, 0.54)), ((70, 70),(0.64, 0.89)), ((71, 71),(0.83, 0.88)),
((72, 72),(0.06, 0.71)), ((73, 73),(0.71, 0.95)), ((74, 74),(0.45, 0.7)),
((75, 75),(0.57, 0.86)), ((76, 76),(0.67, 0.93)), ((77, 77),(0.72, 1.0)),
((78, 78),(0.11, 0.37)), ((79, 79),(0.45, 0.86)), ((80, 80),(0.15, 0.85)),
((81, 81),(0.37, 0.72)), ((82, 82),(0.07, 0.71)), ((83, 83),(0.29, 0.49)),
((84, 84),(0.24, 0.33)), ((85, 85),(0.16, 0.58)), ((86, 86),(0.48, 0.97)),
((87, 87),(0.42, 0.76)), ((88, 88),(0.76, 0.79)), ((89, 89),(0.61, 0.79)),
((90, 90),(0.58, 0.64)), ((91, 91),(0.02, 0.72)), ((92, 92),(0.26, 0.94)),
((93, 93),(0.28, 0.37)), ((94, 94),(0.32, 0.36)), ((95, 95),(0.49, 0.76)),
((96, 96),(0.21, 0.42)), ((97, 97),(0.4, 1.0)), ((98, 98),(0.02, 0.42)),
((99, 99),(0.1, 0.75))))
  )

        //x := x + 0.01 * (-2*x - 3*y + x*x)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-2*acc - 3*yi + acc*acc)})
        //y := y + 0.01 * (x + y)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (xi + acc)})
        Vector(List(x1, y1))
    }

  def nonlin3(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(100)
   && x.specV(Set(((0, 0),(0.38, 0.51)), ((1, 1),(0.27, 0.68)), ((2, 2),(0.53, 0.74)),
((3, 3),(0.61, 0.79)), ((4, 4),(0.33, 0.59)), ((5, 5),(0.29, 0.82)),
((6, 6),(0.8, 0.98)), ((7, 7),(0.28, 0.94)), ((8, 8),(0.05, 0.47)),
((9, 9),(0.06, 0.44)), ((10, 10),(0.09, 0.81)), ((11, 11),(0.39, 0.43)),
((12, 12),(0.0, 0.37)), ((13, 13),(0.17, 0.33)), ((14, 14),(0.19, 0.82)),
((15, 15),(0.55, 0.55)), ((16, 16),(0.2, 0.72)), ((17, 17),(0.39, 0.57)),
((18, 18),(0.41, 0.65)), ((19, 19),(0.09, 0.88)), ((20, 20),(0.44, 0.68)),
((21, 21),(0.6, 0.9)), ((22, 22),(0.24, 0.66)), ((23, 23),(0.1, 0.95)),
((24, 24),(0.89, 0.95)), ((25, 25),(0.39, 0.77)), ((26, 26),(0.47, 0.63)),
((27, 27),(0.12, 0.66)), ((28, 28),(0.08, 0.56)), ((29, 29),(0.23, 0.31)),
((30, 30),(0.39, 0.71)), ((31, 31),(0.11, 0.44)), ((32, 32),(0.19, 0.44)),
((33, 33),(0.36, 0.66)), ((34, 34),(0.22, 0.94)), ((35, 35),(0.43, 0.61)),
((36, 36),(0.27, 0.56)), ((37, 37),(0.12, 0.65)), ((38, 38),(0.4, 1.0)),
((39, 39),(0.37, 0.69)), ((40, 40),(0.3, 0.49)), ((41, 41),(0.35, 0.59)),
((42, 42),(0.31, 0.67)), ((43, 43),(0.71, 0.78)), ((44, 44),(0.02, 0.94)),
((45, 45),(0.23, 0.41)), ((46, 46),(0.51, 0.92)), ((47, 47),(0.68, 0.95)),
((48, 48),(0.5, 0.99)), ((49, 49),(0.24, 0.7)), ((50, 50),(0.4, 0.46)),
((51, 51),(0.16, 0.66)), ((52, 52),(0.4, 0.89)), ((53, 53),(0.14, 0.33)),
((54, 54),(0.27, 0.86)), ((55, 55),(0.24, 0.5)), ((56, 56),(0.24, 0.26)),
((57, 57),(0.55, 0.7)), ((58, 58),(0.26, 0.45)), ((59, 59),(0.22, 0.73)),
((60, 60),(0.18, 0.23)), ((61, 61),(0.2, 0.21)), ((62, 62),(0.44, 0.49)),
((63, 63),(0.18, 0.74)), ((64, 64),(0.12, 0.77)), ((65, 65),(0.14, 0.79)),
((66, 66),(0.15, 0.29)), ((67, 67),(0.54, 0.63)), ((68, 68),(0.59, 0.98)),
((69, 69),(0.12, 0.19)), ((70, 70),(0.07, 0.8)), ((71, 71),(0.2, 0.66)),
((72, 72),(0.01, 0.17)), ((73, 73),(0.52, 0.69)), ((74, 74),(0.42, 0.76)),
((75, 75),(0.13, 0.91)), ((76, 76),(0.2, 0.94)), ((77, 77),(0.64, 0.65)),
((78, 78),(0.36, 0.99)), ((79, 79),(0.91, 0.93)), ((80, 80),(0.07, 0.62)),
((81, 81),(0.38, 0.47)), ((82, 82),(0.3, 0.55)), ((83, 83),(0.35, 0.48)),
((84, 84),(0.33, 0.6)), ((85, 85),(0.77, 0.9)), ((86, 86),(0.31, 0.69)),
((87, 87),(0.08, 0.65)), ((88, 88),(0.62, 0.75)), ((89, 89),(0.39, 0.85)),
((90, 90),(0.02, 0.44)), ((91, 91),(0.45, 0.92)), ((92, 92),(0.04, 0.78)),
((93, 93),(0.12, 0.47)), ((94, 94),(0.03, 0.61)), ((95, 95),(0.41, 0.72)),
((96, 96),(0.3, 0.39)), ((97, 97),(0.03, 0.72)), ((98, 98),(0.3, 0.94)),
((99, 99),(0.03, 0.89))))
   && y >= 0.0 && y <= 1.0 && y.size(100)
   && y.specV(Set(((0, 0),(0.25, 0.45)), ((1, 1),(0.53, 0.69)), ((2, 2),(0.62, 0.83)),
((3, 3),(0.08, 0.71)), ((4, 4),(0.03, 0.06)), ((5, 5),(0.25, 0.29)),
((6, 6),(0.1, 0.51)), ((7, 7),(0.81, 0.93)), ((8, 8),(0.16, 0.6)),
((9, 9),(0.76, 0.9)), ((10, 10),(0.58, 0.62)), ((11, 11),(0.39, 0.65)),
((12, 12),(0.02, 0.98)), ((13, 13),(0.37, 0.94)), ((14, 14),(0.18, 0.52)),
((15, 15),(0.61, 0.69)), ((16, 16),(0.07, 0.83)), ((17, 17),(0.14, 0.78)),
((18, 18),(0.0, 0.64)), ((19, 19),(0.44, 0.48)), ((20, 20),(0.44, 0.66)),
((21, 21),(0.61, 0.68)), ((22, 22),(0.56, 0.92)), ((23, 23),(0.29, 0.63)),
((24, 24),(0.09, 0.83)), ((25, 25),(0.17, 0.86)), ((26, 26),(0.26, 0.54)),
((27, 27),(0.41, 0.5)), ((28, 28),(0.29, 0.95)), ((29, 29),(0.05, 0.46)),
((30, 30),(0.48, 0.81)), ((31, 31),(0.5, 0.98)), ((32, 32),(0.26, 0.65)),
((33, 33),(0.04, 0.42)), ((34, 34),(0.55, 0.75)), ((35, 35),(0.12, 0.66)),
((36, 36),(0.67, 0.99)), ((37, 37),(0.14, 0.51)), ((38, 38),(0.77, 0.77)),
((39, 39),(0.06, 0.2)), ((40, 40),(0.2, 0.52)), ((41, 41),(0.45, 0.51)),
((42, 42),(0.02, 0.55)), ((43, 43),(0.43, 0.47)), ((44, 44),(0.33, 0.41)),
((45, 45),(0.13, 0.98)), ((46, 46),(0.02, 0.28)), ((47, 47),(0.39, 0.91)),
((48, 48),(0.35, 0.56)), ((49, 49),(0.76, 0.82)), ((50, 50),(0.08, 0.7)),
((51, 51),(0.5, 0.51)), ((52, 52),(0.09, 0.31)), ((53, 53),(0.49, 0.76)),
((54, 54),(0.23, 0.4)), ((55, 55),(0.06, 0.83)), ((56, 56),(0.23, 0.37)),
((57, 57),(0.75, 0.82)), ((58, 58),(0.13, 0.56)), ((59, 59),(0.41, 0.96)),
((60, 60),(0.3, 0.97)), ((61, 61),(0.16, 0.86)), ((62, 62),(0.23, 0.75)),
((63, 63),(0.51, 0.84)), ((64, 64),(0.13, 0.69)), ((65, 65),(0.26, 0.54)),
((66, 66),(0.33, 0.46)), ((67, 67),(0.28, 0.66)), ((68, 68),(0.29, 0.34)),
((69, 69),(0.46, 0.82)), ((70, 70),(0.42, 0.45)), ((71, 71),(0.36, 0.65)),
((72, 72),(0.63, 0.83)), ((73, 73),(0.02, 0.68)), ((74, 74),(0.19, 0.55)),
((75, 75),(0.17, 0.24)), ((76, 76),(0.32, 0.91)), ((77, 77),(0.31, 0.38)),
((78, 78),(0.23, 0.58)), ((79, 79),(0.18, 0.84)), ((80, 80),(0.32, 0.48)),
((81, 81),(0.76, 0.77)), ((82, 82),(0.5, 0.88)), ((83, 83),(0.14, 0.16)),
((84, 84),(0.85, 0.94)), ((85, 85),(0.19, 0.66)), ((86, 86),(0.25, 0.8)),
((87, 87),(0.02, 0.8)), ((88, 88),(0.02, 0.78)), ((89, 89),(0.11, 0.61)),
((90, 90),(0.05, 0.35)), ((91, 91),(0.52, 0.83)), ((92, 92),(0.58, 0.6)),
((93, 93),(0.67, 0.76)), ((94, 94),(0.58, 0.79)), ((95, 95),(0.08, 0.68)),
((96, 96),(0.39, 0.43)), ((97, 97),(0.15, 0.83)), ((98, 98),(0.73, 0.75)),
((99, 99),(0.65, 0.67))))
  )

        //x := x + 0.01 * (-x + y*y)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-acc + yi*yi)})
        //y := y + 0.01 * (-2.0*y + 3.0*x*x)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (-2.0*acc + 3.0*xi*xi)})
        Vector(List(x1, y1))
    }


  def pendulum(t: Vector, w: Vector): Vector = {
require(t >= -2.0 && t <= 2.0 && t.size(100)
   && t.specV(Set(((0, 0),(-1.5, 0.26)), ((1, 1),(-1.7, -1.51)), ((2, 2),(0.1, 1.74)),
((3, 3),(-0.1, 0.43)), ((4, 4),(-1.82, 1.21)), ((5, 5),(-0.11, 0.55)),
((6, 6),(-0.61, 1.25)), ((7, 7),(-1.37, -0.09)), ((8, 8),(-0.89, 0.96)),
((9, 9),(-1.6, -0.13)), ((10, 10),(-1.34, 1.58)), ((11, 11),(-0.82, 0.9)),
((12, 12),(0.41, 1.22)), ((13, 13),(-1.4, 1.71)), ((14, 14),(-0.17, 1.48)),
((15, 15),(-1.32, 1.7)), ((16, 16),(1.21, 1.86)), ((17, 17),(0.02, 0.84)),
((18, 18),(-0.68, 0.06)), ((19, 19),(1.26, 1.84)), ((20, 20),(-1.34, -0.78)),
((21, 21),(-0.93, 1.19)), ((22, 22),(0.06, 0.45)), ((23, 23),(1.51, 1.57)),
((24, 24),(-1.23, 0.08)), ((25, 25),(0.83, 1.81)), ((26, 26),(-0.94, -0.72)),
((27, 27),(-0.88, 1.42)), ((28, 28),(-1.32, 0.61)), ((29, 29),(-0.97, 1.04)),
((30, 30),(-0.24, 1.98)), ((31, 31),(0.09, 0.25)), ((32, 32),(0.3, 1.91)),
((33, 33),(-1.81, -1.08)), ((34, 34),(0.09, 1.95)), ((35, 35),(-0.13, 0.58)),
((36, 36),(-1.75, -0.37)), ((37, 37),(1.05, 1.14)), ((38, 38),(-1.97, -0.73)),
((39, 39),(-1.97, 0.56)), ((40, 40),(-0.97, -0.28)), ((41, 41),(0.22, 1.67)),
((42, 42),(-1.78, 1.25)), ((43, 43),(-1.8, 1.77)), ((44, 44),(-1.8, -0.27)),
((45, 45),(-0.91, -0.71)), ((46, 46),(-0.46, -0.31)), ((47, 47),(-1.87, -0.94)),
((48, 48),(0.43, 0.99)), ((49, 49),(-1.21, 0.33)), ((50, 50),(-1.95, -0.5)),
((51, 51),(-0.17, 0.26)), ((52, 52),(-0.13, 1.75)), ((53, 53),(0.51, 1.32)),
((54, 54),(-1.21, 1.66)), ((55, 55),(0.08, 0.95)), ((56, 56),(-0.3, 0.66)),
((57, 57),(-1.28, 0.54)), ((58, 58),(-0.29, 0.83)), ((59, 59),(-1.09, 0.21)),
((60, 60),(-1.52, 1.71)), ((61, 61),(0.9, 1.84)), ((62, 62),(-0.08, 1.98)),
((63, 63),(-0.34, 0.33)), ((64, 64),(-0.54, 0.8)), ((65, 65),(-0.34, -0.11)),
((66, 66),(-1.03, 0.59)), ((67, 67),(-1.63, -1.02)), ((68, 68),(-0.18, 1.71)),
((69, 69),(-0.85, 0.08)), ((70, 70),(1.11, 1.63)), ((71, 71),(-1.09, -0.98)),
((72, 72),(-1.05, -0.0)), ((73, 73),(-1.78, 0.57)), ((74, 74),(-1.3, -0.43)),
((75, 75),(-1.71, -0.07)), ((76, 76),(0.08, 0.79)), ((77, 77),(-1.81, 1.93)),
((78, 78),(-1.98, -1.33)), ((79, 79),(-1.59, 0.86)), ((80, 80),(-1.65, -0.56)),
((81, 81),(1.3, 1.41)), ((82, 82),(-0.64, 1.03)), ((83, 83),(0.3, 1.87)),
((84, 84),(0.54, 0.99)), ((85, 85),(-0.84, -0.51)), ((86, 86),(0.43, 1.15)),
((87, 87),(0.53, 1.84)), ((88, 88),(0.81, 1.41)), ((89, 89),(-1.13, 1.96)),
((90, 90),(-1.65, 1.72)), ((91, 91),(-1.32, -0.72)), ((92, 92),(-0.69, 0.89)),
((93, 93),(0.8, 1.79)), ((94, 94),(1.14, 1.73)), ((95, 95),(-0.01, 1.78)),
((96, 96),(1.28, 1.53)), ((97, 97),(-1.71, -0.84)), ((98, 98),(-0.43, 0.91)),
((99, 99),(-1.24, -0.22))))
   && w >= -5.0 && w <= 5.0 && w.size(100)
   && w.specV(Set(((0, 0),(2.43, 4.89)), ((1, 1),(0.98, 2.02)), ((2, 2),(-4.81, 0.01)),
((3, 3),(0.21, 2.7)), ((4, 4),(-1.57, -0.8)), ((5, 5),(1.07, 4.39)),
((6, 6),(-3.7, 0.64)), ((7, 7),(-4.6, -0.29)), ((8, 8),(-0.15, 1.09)),
((9, 9),(-1.9, 2.88)), ((10, 10),(-0.96, -0.04)), ((11, 11),(-4.13, 2.02)),
((12, 12),(-2.45, -0.89)), ((13, 13),(-3.78, 3.24)), ((14, 14),(-4.84, -1.89)),
((15, 15),(-3.2, -3.1)), ((16, 16),(-2.87, 2.16)), ((17, 17),(-3.6, 1.86)),
((18, 18),(-2.87, -2.13)), ((19, 19),(-3.43, -2.69)), ((20, 20),(-1.87, 1.55)),
((21, 21),(-2.53, -2.23)), ((22, 22),(-3.96, -2.53)), ((23, 23),(-2.5, 2.58)),
((24, 24),(-3.19, 3.37)), ((25, 25),(-2.57, 2.34)), ((26, 26),(-4.96, -4.1)),
((27, 27),(-1.47, -0.14)), ((28, 28),(-0.5, 1.37)), ((29, 29),(-4.5, -4.05)),
((30, 30),(1.04, 4.77)), ((31, 31),(2.06, 4.68)), ((32, 32),(2.3, 4.81)),
((33, 33),(-1.78, -0.08)), ((34, 34),(-4.78, 4.14)), ((35, 35),(-4.13, 2.4)),
((36, 36),(-4.96, 2.37)), ((37, 37),(3.25, 3.98)), ((38, 38),(1.61, 3.95)),
((39, 39),(0.83, 3.23)), ((40, 40),(0.73, 3.3)), ((41, 41),(-2.79, -1.27)),
((42, 42),(0.48, 2.92)), ((43, 43),(-1.92, 1.38)), ((44, 44),(-4.11, 5.0)),
((45, 45),(-4.23, -2.2)), ((46, 46),(0.43, 2.06)), ((47, 47),(-2.75, 3.28)),
((48, 48),(-2.12, 2.27)), ((49, 49),(-4.02, -3.32)), ((50, 50),(-2.0, -1.18)),
((51, 51),(-2.76, -0.16)), ((52, 52),(0.19, 4.79)), ((53, 53),(-1.61, -0.7)),
((54, 54),(-4.31, 3.37)), ((55, 55),(-2.09, 3.02)), ((56, 56),(4.61, 4.83)),
((57, 57),(-4.84, 3.56)), ((58, 58),(1.9, 2.56)), ((59, 59),(-0.61, 2.99)),
((60, 60),(-4.71, 1.21)), ((61, 61),(-3.3, 1.79)), ((62, 62),(-3.5, 1.9)),
((63, 63),(-2.59, -2.2)), ((64, 64),(-3.99, 1.45)), ((65, 65),(-4.51, 3.93)),
((66, 66),(-0.72, 0.36)), ((67, 67),(-3.1, 0.91)), ((68, 68),(-4.23, 4.75)),
((69, 69),(-2.05, 4.76)), ((70, 70),(-3.91, -0.64)), ((71, 71),(-0.84, 2.16)),
((72, 72),(0.43, 1.11)), ((73, 73),(-3.61, -2.08)), ((74, 74),(-3.8, 4.28)),
((75, 75),(-4.91, 2.93)), ((76, 76),(0.63, 2.17)), ((77, 77),(1.16, 4.06)),
((78, 78),(-1.76, -0.13)), ((79, 79),(-4.41, -3.48)), ((80, 80),(-3.03, 3.7)),
((81, 81),(-2.81, 1.31)), ((82, 82),(0.7, 0.73)), ((83, 83),(-3.52, -2.34)),
((84, 84),(-4.79, 0.08)), ((85, 85),(-3.6, -2.52)), ((86, 86),(-0.12, 3.73)),
((87, 87),(-2.35, -2.34)), ((88, 88),(2.64, 3.49)), ((89, 89),(0.22, 1.59)),
((90, 90),(1.12, 3.63)), ((91, 91),(2.5, 3.38)), ((92, 92),(0.31, 2.71)),
((93, 93),(-3.49, -1.74)), ((94, 94),(-2.66, 1.33)), ((95, 95),(-3.62, 0.02)),
((96, 96),(-4.73, -2.47)), ((97, 97),(4.38, 4.51)), ((98, 98),(-4.9, -2.48)),
((99, 99),(1.09, 4.25))))
  )

        val h: Real = 0.01
        val L: Real = 2.0
        val g: Real = 9.80665

        val iter = Vector.zip(t,w)
        val init = Vector(List(t.head, w.head))

        iter.fold(init)((acc, x) => {
            val kt = acc.at(1)
            val kw = -g/L * sin(acc.head)

            val v = Vector(List(kt,kw))
            acc + v*h
        })
    }

  def roux1(x: Vector): Real = {
require(x >= -58.25 && x <= 61.32 && x.size(100)
   && x.specV(Set(((0, 0),(-12.24, 35.43)), ((1, 1),(25.78, 40.6)), ((2, 2),(-54.74, 57.04)),
((3, 3),(-42.82, 44.88)), ((4, 4),(-36.19, 7.45)), ((5, 5),(-11.82, 25.13)),
((6, 6),(13.12, 24.91)), ((7, 7),(-38.76, 46.82)), ((8, 8),(-15.37, 37.98)),
((9, 9),(-11.83, 53.4)), ((10, 10),(-52.62, 57.24)), ((11, 11),(-51.2, -49.24)),
((12, 12),(11.42, 36.94)), ((13, 13),(-21.28, -16.93)), ((14, 14),(-33.32, -23.89)),
((15, 15),(36.87, 61.23)), ((16, 16),(-53.16, 36.5)), ((17, 17),(15.19, 20.93)),
((18, 18),(-37.66, -5.96)), ((19, 19),(-15.82, 9.13)), ((20, 20),(-38.85, 46.67)),
((21, 21),(36.84, 39.16)), ((22, 22),(-39.95, 51.01)), ((23, 23),(-50.55, 52.7)),
((24, 24),(8.17, 23.07)), ((25, 25),(17.33, 49.62)), ((26, 26),(-28.21, -26.46)),
((27, 27),(17.66, 23.18)), ((28, 28),(-40.2, 60.1)), ((29, 29),(-49.62, -19.05)),
((30, 30),(-7.12, 8.54)), ((31, 31),(-18.9, -6.32)), ((32, 32),(-16.36, -1.22)),
((33, 33),(-27.74, -14.84)), ((34, 34),(-1.17, 6.77)), ((35, 35),(-36.95, -19.06)),
((36, 36),(-54.69, -36.24)), ((37, 37),(50.04, 60.28)), ((38, 38),(-22.36, 24.13)),
((39, 39),(-55.4, 4.31)), ((40, 40),(18.24, 34.99)), ((41, 41),(-8.82, 28.47)),
((42, 42),(-20.11, -2.89)), ((43, 43),(-17.81, -13.4)), ((44, 44),(10.53, 36.13)),
((45, 45),(-47.76, 21.61)), ((46, 46),(-1.69, 24.63)), ((47, 47),(1.71, 41.35)),
((48, 48),(3.38, 34.57)), ((49, 49),(-28.04, -19.99)), ((50, 50),(-43.4, -39.6)),
((51, 51),(-58.03, -50.84)), ((52, 52),(-31.71, -16.17)), ((53, 53),(-33.74, -28.11)),
((54, 54),(50.32, 55.0)), ((55, 55),(13.86, 58.25)), ((56, 56),(-51.5, -8.42)),
((57, 57),(31.58, 37.13)), ((58, 58),(2.42, 9.51)), ((59, 59),(-6.74, 19.47)),
((60, 60),(23.06, 45.86)), ((61, 61),(-16.17, 24.76)), ((62, 62),(-34.69, 39.48)),
((63, 63),(-8.1, 28.21)), ((64, 64),(-35.31, 58.9)), ((65, 65),(-42.59, 0.71)),
((66, 66),(-18.18, 3.79)), ((67, 67),(-43.08, 46.46)), ((68, 68),(-37.6, 13.59)),
((69, 69),(-22.76, 14.81)), ((70, 70),(-23.36, 27.17)), ((71, 71),(-54.04, 35.8)),
((72, 72),(-10.11, 41.82)), ((73, 73),(40.61, 47.11)), ((74, 74),(-40.01, -22.46)),
((75, 75),(-13.66, 57.57)), ((76, 76),(12.6, 29.19)), ((77, 77),(-24.25, 18.41)),
((78, 78),(-1.22, 53.76)), ((79, 79),(-10.81, 48.76)), ((80, 80),(-36.67, 53.36)),
((81, 81),(-9.07, -1.96)), ((82, 82),(-42.74, -12.31)), ((83, 83),(-13.11, 13.96)),
((84, 84),(39.98, 43.54)), ((85, 85),(16.29, 43.76)), ((86, 86),(-49.04, 29.1)),
((87, 87),(-8.0, 40.45)), ((88, 88),(6.64, 45.18)), ((89, 89),(-30.92, -21.0)),
((90, 90),(17.34, 31.3)), ((91, 91),(1.86, 36.42)), ((92, 92),(47.38, 51.16)),
((93, 93),(-35.82, 16.28)), ((94, 94),(-50.76, 2.67)), ((95, 95),(8.08, 21.3)),
((96, 96),(-14.41, 32.76)), ((97, 97),(18.19, 27.96)), ((98, 98),(9.61, 23.7)),
((99, 99),(-1.43, 46.93))))
  )

        x.fold(0.0)((y: Real, i: Real) => {1.5 * i - 0.7 * y})
    }


  def variance(x: Vector): Real = {
require(x >= -252.68 && x <= 72.42 && x.size(100)
   && x.specV(Set(((0, 0),(-214.3, -22.85)), ((1, 1),(-143.82, 43.58)), ((2, 2),(-238.1, -154.01)),
((3, 3),(-226.99, -40.7)), ((4, 4),(-159.6, -45.62)), ((5, 5),(-207.96, -153.46)),
((6, 6),(-108.66, -48.23)), ((7, 7),(-151.6, -131.83)), ((8, 8),(-137.0, -78.03)),
((9, 9),(-149.31, -29.55)), ((10, 10),(-88.01, -73.17)), ((11, 11),(-189.14, -19.02)),
((12, 12),(-127.08, -19.41)), ((13, 13),(-49.53, -9.9)), ((14, 14),(-199.74, -88.68)),
((15, 15),(-177.53, -176.95)), ((16, 16),(-214.43, -153.15)), ((17, 17),(-240.08, -78.87)),
((18, 18),(-120.46, 66.75)), ((19, 19),(-240.2, -116.85)), ((20, 20),(-252.45, 4.52)),
((21, 21),(30.06, 64.43)), ((22, 22),(-136.98, -64.99)), ((23, 23),(-164.61, 22.26)),
((24, 24),(-221.46, -169.14)), ((25, 25),(-215.61, 50.41)), ((26, 26),(-101.46, -24.95)),
((27, 27),(-166.59, -119.04)), ((28, 28),(-66.72, -4.11)), ((29, 29),(-136.06, -77.06)),
((30, 30),(-48.37, 8.58)), ((31, 31),(-236.33, 65.44)), ((32, 32),(-31.34, -6.09)),
((33, 33),(-151.82, -44.25)), ((34, 34),(-129.49, -61.34)), ((35, 35),(-150.68, -34.19)),
((36, 36),(-197.32, -43.17)), ((37, 37),(15.55, 63.95)), ((38, 38),(-26.04, 64.69)),
((39, 39),(-165.33, -131.92)), ((40, 40),(-139.52, 61.21)), ((41, 41),(-182.14, -87.16)),
((42, 42),(19.05, 47.52)), ((43, 43),(-193.73, 20.74)), ((44, 44),(-28.54, 22.4)),
((45, 45),(-197.66, 39.75)), ((46, 46),(-146.72, -38.64)), ((47, 47),(-159.73, -125.28)),
((48, 48),(-72.79, -24.96)), ((49, 49),(-62.77, 48.4)), ((50, 50),(-18.32, -17.12)),
((51, 51),(-25.12, 22.76)), ((52, 52),(-129.31, 68.53)), ((53, 53),(-90.35, -13.83)),
((54, 54),(-248.82, 25.83)), ((55, 55),(-68.95, 24.04)), ((56, 56),(-115.75, 18.84)),
((57, 57),(-167.05, 7.21)), ((58, 58),(-161.92, -121.33)), ((59, 59),(-174.72, 45.14)),
((60, 60),(-151.0, 4.47)), ((61, 61),(-220.18, -2.99)), ((62, 62),(-106.87, -9.58)),
((63, 63),(-211.88, 15.45)), ((64, 64),(-205.45, -182.89)), ((65, 65),(-98.82, -70.59)),
((66, 66),(-184.72, -118.47)), ((67, 67),(-209.26, -109.42)), ((68, 68),(11.31, 50.76)),
((69, 69),(-177.61, 61.38)), ((70, 70),(-195.48, -135.57)), ((71, 71),(-143.23, -95.54)),
((72, 72),(-183.28, -77.27)), ((73, 73),(12.96, 48.67)), ((74, 74),(-97.64, 22.64)),
((75, 75),(-222.9, 34.11)), ((76, 76),(-111.92, -65.59)), ((77, 77),(-197.75, 1.8)),
((78, 78),(-153.21, 2.44)), ((79, 79),(-216.2, -108.6)), ((80, 80),(-151.97, -52.8)),
((81, 81),(20.25, 32.7)), ((82, 82),(-230.07, -90.04)), ((83, 83),(-166.35, -135.34)),
((84, 84),(-230.03, -199.76)), ((85, 85),(-150.33, 60.91)), ((86, 86),(-51.14, 17.68)),
((87, 87),(-52.42, 37.01)), ((88, 88),(-3.43, 7.59)), ((89, 89),(-125.44, -93.84)),
((90, 90),(-198.7, 54.54)), ((91, 91),(-228.42, 52.16)), ((92, 92),(-82.01, -19.38)),
((93, 93),(-168.2, 7.48)), ((94, 94),(-197.12, -151.3)), ((95, 95),(-245.93, -131.97)),
((96, 96),(-204.58, -30.62)), ((97, 97),(-130.43, -40.05)), ((98, 98),(-83.88, -54.73)),
((99, 99),(-187.9, 50.78))))
  )

        val n: Real = x.length()
        val y = x.fold(0.0)((acc: Real, i: Real) => acc + i)
        val avg = y / n

        val z = x.fold(0.0)((acc: Real, i: Real) => acc + pow(i - avg, 2))
        z / n
    }



}
